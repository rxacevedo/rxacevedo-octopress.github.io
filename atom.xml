<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Roberto Acevedo]]></title>
  <link href="http://rxacevedo.github.io/atom.xml" rel="self"/>
  <link href="http://rxacevedo.github.io/"/>
  <updated>2014-02-11T06:53:51-05:00</updated>
  <id>http://rxacevedo.github.io/</id>
  <author>
    <name><![CDATA[Roberto Acevedo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Approximating the Golden Ratio]]></title>
    <link href="http://rxacevedo.github.io/blog/2014/02/09/approximating-the-golden-ratio/"/>
    <updated>2014-02-09T12:47:20-05:00</updated>
    <id>http://rxacevedo.github.io/blog/2014/02/09/approximating-the-golden-ratio</id>
    <content type="html"><![CDATA[<p>This will be short post, inspired by a problem I encountered while
working through chapter 3 of
<a href="https://gustavus.edu/+max/concrete-abstractions.html">Concrete Abstractions</a>
a few months back. We are tasked with writing a procedure that
approximates the Golden Ratio within a certain tolerance. Recall that
the Golden Ratio is defined as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>a/b = (a + b)/a
</span></code></pre></td></tr></table></div></figure>


<p>With a little math, we can restate this as a recurrence relation,
which provides the key for writing our procedure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Φ = a/b
</span><span class='line'>
</span><span class='line'>a/b = (a + b)/a
</span><span class='line'>    = a/a + b/a
</span><span class='line'>    = 1 + b/a
</span><span class='line'>    = 1 + 1/(a/b)
</span><span class='line'>
</span><span class='line'>a/b = 1 + 1/(a/b)
</span><span class='line'>
</span><span class='line'>Φ = 1 + 1/Φ
</span></code></pre></td></tr></table></div></figure>


<p>Now that we can state the Golden Ratio as a function of itself, we can
write a procedure that will approxiate it within a certain tolerance.
To know when to stop, we are given a valuable piece of information:
the error of each approximation is less than 1 over the square of its
denominator. This means that we can stop <code>recur</code>ring when 1/(b*b) is
less than our acceptable tolerance. Our final function can be set up
as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">approximate-golden-ratio</span> <span class="p">[</span><span class="nv">tolerance</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">improve</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">guess</span><span class="p">]</span>
</span><span class='line'>                  <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="p">(</span><span class="nb">/ </span><span class="mi">1</span> <span class="nv">guess</span><span class="p">)))]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">start</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>      <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">d</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">clojure.lang.Ratio</span> <span class="p">(</span><span class="nf">type</span> <span class="nv">start</span><span class="p">))</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">denominator</span> <span class="nv">start</span><span class="p">)</span>
</span><span class='line'>                <span class="mi">1</span><span class="p">)]</span>
</span><span class='line'>        <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">tolerance</span> <span class="p">(</span><span class="nb">/ </span><span class="mi">1</span> <span class="p">(</span><span class="nb">* </span><span class="nv">d</span> <span class="nv">d</span><span class="p">)))</span>
</span><span class='line'>          <span class="nv">start</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nf">improve</span> <span class="nv">start</span><span class="p">)))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above check on the type of our start argument is necessary because
in Clojure, 1/1 evaluates to 1 immediately, so calling <code>denominator</code>
on it will throw a <code>ClassCastException</code> right off the bat. I could not
find a way around this issue, not even with quoting:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="ss">&#39;1/1</span>
</span><span class='line'><span class="c1">;;-&gt; 1</span>
</span><span class='line'>
</span><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="nv">/1</span><span class="p">)</span>
</span><span class='line'><span class="c1">;;-&gt; (1)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now with our function in place, we can approximate the Golden Ratio:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">approximate-golden-ratio</span> <span class="mi">1</span><span class="nv">/50000</span><span class="p">)</span>
</span><span class='line'><span class="c1">;;-&gt; 377/233</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">double </span><span class="p">(</span><span class="nf">approximate-golden-ratio</span> <span class="mi">1</span><span class="nv">/50000</span><span class="p">))</span>
</span><span class='line'><span class="c1">;;-&gt; 1.618025751072961</span>
</span></code></pre></td></tr></table></div></figure>


<p>While we&rsquo;re here, I&rsquo;d like to demonstrate something about the Golden
Ratio that is pretty neat: each approximation (using this method of
rational approximations) is a <strong>ratio of successive Fibonacci
numbers</strong>. Let&rsquo;s modify our function to print these ratios as it
loops:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">approximate-golden-ratio</span> <span class="p">[</span><span class="nv">tolerance</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">improve</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">guess</span><span class="p">]</span>
</span><span class='line'>                  <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="p">(</span><span class="nb">/ </span><span class="mi">1</span> <span class="nv">guess</span><span class="p">)))]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">start</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;Current guess: &quot;</span> <span class="nv">start</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">d</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">clojure.lang.Ratio</span> <span class="p">(</span><span class="nf">type</span> <span class="nv">start</span><span class="p">))</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">denominator</span> <span class="nv">start</span><span class="p">)</span>
</span><span class='line'>                <span class="mi">1</span><span class="p">)]</span>
</span><span class='line'>        <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">tolerance</span> <span class="p">(</span><span class="nb">/ </span><span class="mi">1</span> <span class="p">(</span><span class="nb">* </span><span class="nv">d</span> <span class="nv">d</span><span class="p">)))</span>
</span><span class='line'>          <span class="nv">start</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nf">improve</span> <span class="nv">start</span><span class="p">)))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now when we call it, we will see successive ratios of the Fibonacci numbers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">approximate-golden-ratio</span> <span class="mi">1</span><span class="nv">/50000</span><span class="p">)</span>
</span><span class='line'><span class="c1">;;-&gt; Current guess: 1</span>
</span><span class='line'><span class="c1">;;-&gt; Current guess: 2</span>
</span><span class='line'><span class="c1">;;-&gt; Current guess: 3/2</span>
</span><span class='line'><span class="c1">;;-&gt; Current guess: 5/3</span>
</span><span class='line'><span class="c1">;;-&gt; Current guess: 8/5</span>
</span><span class='line'><span class="c1">;;-&gt; Current guess: 13/8</span>
</span><span class='line'><span class="c1">;;-&gt; Current guess: 21/13</span>
</span><span class='line'><span class="c1">;;-&gt; Current guess: 34/21</span>
</span><span class='line'><span class="c1">;;-&gt; Current guess: 55/34</span>
</span><span class='line'><span class="c1">;;-&gt; Current guess: 89/55</span>
</span><span class='line'><span class="c1">;;-&gt; Current guess: 144/89</span>
</span><span class='line'><span class="c1">;;-&gt; Current guess: 233/144</span>
</span><span class='line'><span class="c1">;;-&gt; Current guess: 377/233</span>
</span><span class='line'><span class="c1">;;-&gt; 377/233</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which matches the Fibonacci sequence shown below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">fibs</span> <span class="p">(</span><span class="nb">lazy-cat </span><span class="p">[</span><span class="mi">0</span> <span class="mi">1</span><span class="p">]</span> <span class="p">(</span><span class="nb">map + </span><span class="nv">fibs</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">fibs</span><span class="p">))))</span>
</span><span class='line'><span class="c1">;;-&gt; #&#39;user/fibs</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">take </span><span class="mi">15</span> <span class="nv">fibs</span><span class="p">)</span>
</span><span class='line'><span class="c1">;;-&gt; (0 1 1 2 3 5 8 13 21 34 55 89 144 233 377)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can define this sequence of ratios in a way simmilar to how we
define fibs itself (we drop 0 on the low end to avoid dividing by
zero).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">golden-ratios</span> <span class="p">(</span><span class="nb">map / </span><span class="p">(</span><span class="nb">drop </span><span class="mi">2</span> <span class="nv">fibs</span><span class="p">)</span> <span class="p">(</span><span class="nb">drop </span><span class="mi">1</span> <span class="nv">fibs</span><span class="p">)))</span>
</span><span class='line'><span class="c1">;;-&gt; #&#39;user/golden-ratios</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">take </span><span class="mi">15</span> <span class="nv">golden-ratios</span><span class="p">)</span>
</span><span class='line'><span class="c1">;;-&gt; (1 2 3/2 5/3 8/5 13/8 21/13 34/21 55/34 89/55 144/89 233/144</span>
</span><span class='line'><span class="c1">;;-&gt; 377/233 610/377 987/610</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Or</span>
</span><span class='line'><span class="p">(</span><span class="nb">take </span><span class="mi">15</span> <span class="p">(</span><span class="nb">iterate </span><span class="o">#</span><span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="p">(</span><span class="nb">/ </span><span class="mi">1</span> <span class="nv">%</span><span class="p">))</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'><span class="c1">;;-&gt; (1 2 3/2 5/3 8/5 13/8 21/13 34/21 55/34 89/55 144/89 233/144</span>
</span><span class='line'><span class="c1">;;-&gt; 377/233 610/377 987/610</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">map double </span><span class="p">(</span><span class="nb">take </span><span class="mi">15</span> <span class="nv">golden-ratios</span><span class="p">))</span>
</span><span class='line'><span class="c1">;;-&gt; (1.0 2.0 1.5 1.666666666666667 1.6 1.625 1.615384615384615</span>
</span><span class='line'><span class="c1">;;-&gt; 1.619047619047619 1.617647058823529 1.618181818181818</span>
</span><span class='line'><span class="c1">;;-&gt; 1.617977528089888 1.618055555555556 1.618025751072961</span>
</span><span class='line'><span class="c1">;;-&gt; 1.618037135278515 1.618032786885246)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">map double </span><span class="p">(</span><span class="nb">take </span><span class="mi">15</span> <span class="p">(</span><span class="nb">iterate </span><span class="o">#</span><span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="p">(</span><span class="nb">/ </span><span class="mi">1</span> <span class="nv">%</span><span class="p">))</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'><span class="c1">;;-&gt; (1.0 2.0 1.5 1.666666666666667 1.6 1.625 1.615384615384615</span>
</span><span class='line'><span class="c1">;;-&gt; 1.619047619047619 1.617647058823529 1.618181818181818</span>
</span><span class='line'><span class="c1">;;-&gt; 1.617977528089888 1.618055555555556 1.618025751072961</span>
</span><span class='line'><span class="c1">;;-&gt; 1.618037135278515 1.618032786885246)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can see that these statements are all true:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Φ = 1 + (1 / Φ)
</span><span class='line'>Φ = F(n) / F(n - 1)
</span><span class='line'>Φ = 1 + (1 / (F(n) / F(n - 1)))
</span><span class='line'>F(n) = Φ * F(n - 1)
</span></code></pre></td></tr></table></div></figure>


<p>This last one is interesting &ndash; we can use the golden ratio to
<strong>approximate</strong> the Fibonacci sequence:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">* </span><span class="mf">1.61803</span> <span class="nv">%</span><span class="p">)</span> <span class="p">(</span><span class="nb">take </span><span class="mi">15</span> <span class="nv">fibs</span><span class="p">))</span>
</span><span class='line'><span class="c1">;;-&gt; (0.0 1.61803 1.61803 3.23606 4.85409 8.090150000000001 12.94424</span>
</span><span class='line'><span class="c1">;;-&gt; 21.034390000000002 33.97863 55.013020000000004 88.99165 144.00467</span>
</span><span class='line'><span class="c1">;;-&gt; 232.99632000000003 377.00099 609.9973100000001)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">int </span><span class="p">(</span><span class="nb">* </span><span class="mf">1.61803</span> <span class="nv">%</span><span class="p">))</span> <span class="p">(</span><span class="nb">take </span><span class="mi">15</span> <span class="nv">fibs</span><span class="p">))</span>
</span><span class='line'><span class="c1">;;-&gt; (0 1 1 3 4 8 12 21 33 55 88 144 232 377 609)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">drop </span><span class="mi">1</span> <span class="p">(</span><span class="nb">take </span><span class="mi">16</span> <span class="nv">fibs</span><span class="p">))</span>
</span><span class='line'><span class="c1">;;-&gt; (1 1 2 3 5 8 13 21 34 55 89 144 233 377 610)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is only an approximation and does not hold in all cases, but is
interesting to observe nonetheless.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Binding and Being Meta]]></title>
    <link href="http://rxacevedo.github.io/blog/2014/02/07/dynamic-binding-and-being-meta/"/>
    <updated>2014-02-07T17:47:38-05:00</updated>
    <id>http://rxacevedo.github.io/blog/2014/02/07/dynamic-binding-and-being-meta</id>
    <content type="html"><![CDATA[<p>Yesterday at work I had the perverse urge to send an email to someone
that contained the code used to generate the email itself. The concept
is relatively similar to the below (initially incorrect) example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">a</span> <span class="o">&#39;</span><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;Printing myself: &quot;</span> <span class="nv">a</span><span class="p">))]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">eval </span><span class="nv">a</span><span class="p">))</span>
</span><span class='line'><span class="c1">;;-&gt; Printing myself: Unbound: #&#39;user/a</span>
</span><span class='line'><span class="c1">;;-&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>Clearly this doesn&rsquo;t work, but I would like to explore why exactly that is.
First though, we should discuss how Clojure (and Lisps in general)
treat and evaluate functions. When we call a function, we do it in
this way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">inc </span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="c1">;;-&gt; 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is just a list of symbols; the Clojure reader will recognize
this list as a call because:</p>

<ol>
<li>It is not empty.</li>
<li>It is not quoted.</li>
</ol>


<p>The first item in the list is assumed to be a special form, a macro,
or a function. This is why this works:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="c1">;;-&gt; 15</span>
</span></code></pre></td></tr></table></div></figure>


<p>But this does not:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="c1">;;-&gt; ClassCastException java.lang.Long cannot be cast to</span>
</span><span class='line'><span class="c1">;;-&gt; clojure.lang.IFn  user/eval12732 (form-init6247023468986614197.clj:1)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The exception message sums it up nicely, 1 is not a function and therefore
cannot be called, so we get an error. Many times though, we will want
to create a list and not have it evaluated. We do this by quoting the
list, either with the <code>quote</code> function or using a quote literal <code>'</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="c1">;;-&gt; (1 2 3 4 5)</span>
</span><span class='line'>
</span><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="nf">a</span> <span class="nb">list </span><span class="nv">of</span> <span class="nv">words</span> <span class="nb">and </span><span class="nv">stuff</span><span class="p">)</span>
</span><span class='line'><span class="c1">;;-&gt; (a list of words and stuff)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">quote </span><span class="p">(</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="c1">;;-&gt; (0 1 1 2 3)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">quote </span><span class="p">(</span><span class="nf">here</span> <span class="nv">have</span> <span class="nv">more</span> <span class="nv">words</span><span class="p">))</span>
</span><span class='line'><span class="c1">;;-&gt; (here have more words)</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s no difference between a quoted list and an unquoted
list aside from the fact that one is evaluated and one is not.
Likewise, there&rsquo;s no difference between the symbols in a list aside
from how they are treated, which depends on whether or not the list is
evaluted.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;This is also&quot;</span> <span class="s">&quot; a list of symbols!&quot;</span><span class="p">))</span>
</span><span class='line'><span class="c1">;;-&gt; (println (str &quot;This is also&quot; &quot; a list of symbols!&quot;))</span>
</span><span class='line'><span class="c1">;;-&gt; nil</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;This is also&quot;</span> <span class="s">&quot; a list of symbols!&quot;</span><span class="p">))</span>
</span><span class='line'><span class="c1">;;-&gt; This is also a list of symbols!</span>
</span><span class='line'><span class="c1">;;-&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we want to evaluate a list, we can use the <code>eval</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">eval </span><span class="o">&#39;</span><span class="p">(</span><span class="nb">take </span><span class="mi">10</span> <span class="p">(</span><span class="nb">iterate inc </span><span class="mi">0</span><span class="p">)))</span>
</span><span class='line'><span class="c1">;;-&gt; (0 1 2 3 4 5 6 7 8 9)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Going back to the example above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">a</span> <span class="o">&#39;</span><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;Printing myself: &quot;</span> <span class="nv">a</span><span class="p">))]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">eval </span><span class="nv">a</span><span class="p">))</span>
</span><span class='line'><span class="c1">;;-&gt; Printing myself: Unbound: #&#39;user/a</span>
</span><span class='line'><span class="c1">;;-&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>This doesn&rsquo;t work because the <code>let</code> binding is lexically scoped,
meaning that anything declared in the let is bound/accessible only in
that scope, or the immediate textual region. The <code>eval</code> function,
however, evaluates forms in a
<a href="http://www.ai.mit.edu/projects/iiip/doc/CommonLISP/HyperSpec/Body/glo_n.html#null_lexical_environment">null lexical environment</a>,
so it cannot see our binding on <code>a</code>. That is why when we evaluate the
s-expression using <code>eval</code>, we cannot access the binding on the Var &ndash; it
is outside of our scope. By that same token, that is why we can have
nested <code>let</code>s:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">a</span> <span class="s">&quot;YOLO&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">b</span> <span class="s">&quot;Don&#39;t kill my vibe&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">c</span> <span class="s">&quot;I&#39;m my own woman&quot;</span><span class="p">]</span>
</span><span class='line'>      <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">d</span> <span class="s">&quot;Go fit or go home&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;Instagram in a nutshell: \n&quot;</span>
</span><span class='line'>                      <span class="p">(</span><span class="nf">clojure.string/join</span> <span class="s">&quot;\n&quot;</span> <span class="p">[</span><span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">])))))))</span>
</span><span class='line'><span class="c1">;;-&gt; Instagram in a nutshell:</span>
</span><span class='line'><span class="c1">;;-&gt; YOLO</span>
</span><span class='line'><span class="c1">;;-&gt; Don&#39;t kill my vibe</span>
</span><span class='line'><span class="c1">;;-&gt; I&#39;m my own woman</span>
</span><span class='line'><span class="c1">;;-&gt; Go fit or go home</span>
</span><span class='line'><span class="c1">;;-&gt; nil                      </span>
</span></code></pre></td></tr></table></div></figure>


<p>Each subsequent <code>let</code> is enclosed within the outer <code>let</code>, in which the
call to <code>println</code> is evaluated. This is exactly what a closure is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">a</span> <span class="s">&quot;Hey I&#39;m a Var and I&#39;m accessible throughout this entire namespace!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">;;-&gt; #&#39;user/a</span>
</span><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">a</span> <span class="s">&quot;But not when we&#39;re in a lexical closure, ha!&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="nv">a</span><span class="p">)</span>
</span><span class='line'><span class="c1">;;-&gt; &quot;But not when we&#39;re in a lexical closure, ha!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To get around this scope issue, we need to ensure that the Var we are trying
to access can be resolved outside of the lexical scope of the call to
<code>eval</code>. We can do this by either:</p>

<ol>
<li>Using <code>def</code> to declare the Var and bind a value to it.</li>
<li>Using <code>declare</code> to declare the Var without a binding, and then use
<code>binding</code> to bind a value to it.</li>
</ol>


<p>Whichever way we do it, we need to ensure that the Var is dynamically
accessible, or all of our work will be for naught. This is done by
declaring or defining the Var with dynamic <strong>metadata</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">do</span>
</span><span class='line'>  <span class="p">(</span><span class="kd">declare </span><span class="o">^</span><span class="ss">:dynamic</span> <span class="nv">a</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">binding </span><span class="p">[</span><span class="nv">a</span> <span class="o">&#39;</span><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;Printing myself: &quot;</span> <span class="nv">a</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">eval </span><span class="nv">a</span><span class="p">)))</span>
</span><span class='line'> <span class="c1">;;-&gt; Printing myself: (println (str &quot;Printing myself: &quot; a))</span>
</span><span class='line'> <span class="c1">;;-&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s the ticket! Now we can be super cool/meta programmer kidz (if
you have the amazazazing
<a href="https://github.com/cemerick/pomegranate">pomegranate by Chas Emerick</a> on your classpath):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">cemerick.pomegranate</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">])</span>
</span><span class='line'><span class="c1">;;-&gt; nil</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">add-dependencies</span> <span class="ss">:coordinates</span> <span class="o">&#39;</span><span class="p">[[</span><span class="nv">com.draines/postal</span> <span class="s">&quot;1.11.1&quot;</span><span class="p">]]</span>
</span><span class='line'>                  <span class="ss">:repositories</span> <span class="p">{</span><span class="s">&quot;clojars&quot;</span> <span class="s">&quot;http://clojars.org/repo&quot;</span><span class="p">})</span>
</span><span class='line'><span class="c1">;;-&gt; {[javax.mail/mail &quot;1.4.4&quot; :exclusions [[javax.activation/activation]]] nil,</span>
</span><span class='line'><span class="c1">;;-&gt;  [commons-codec &quot;1.7&quot;] nil,</span>
</span><span class='line'><span class="c1">;;-&gt;  [com.draines/postal &quot;1.11.1&quot;]</span>
</span><span class='line'><span class="c1">;;-&gt;  #{[javax.mail/mail &quot;1.4.4&quot; :exclusions [[javax.activation/activation]]] [commons-codec &quot;1.7&quot;]}}</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">postal</span> <span class="p">[</span><span class="nv">core</span> <span class="ss">:as</span> <span class="nv">postal</span><span class="p">]])</span>
</span><span class='line'><span class="c1">;;-&gt; nil</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">do</span>
</span><span class='line'>  <span class="p">(</span><span class="kd">declare </span><span class="o">^</span><span class="ss">:dynamic</span> <span class="nv">codez</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">binding </span><span class="p">[</span><span class="nv">codez</span> <span class="o">&#39;</span><span class="p">(</span><span class="nf">postal/send-message</span> <span class="o">^</span><span class="p">{</span><span class="ss">:host</span> <span class="s">&quot;smtp.neatwebsite.com&quot;</span>
</span><span class='line'>                                            <span class="ss">:user</span> <span class="s">&quot;brogrammer@neatwebsite.com&quot;</span>
</span><span class='line'>                                            <span class="ss">:pass</span> <span class="s">&quot;sekr3t!&quot;</span>
</span><span class='line'>                                            <span class="ss">:ssl</span> <span class="ss">:damn-right!</span><span class="p">}</span>
</span><span class='line'>                                          <span class="p">{</span><span class="ss">:from</span> <span class="s">&quot;A really cool dude&quot;</span>
</span><span class='line'>                                           <span class="ss">:to</span> <span class="s">&quot;you@yoursite.com&quot;</span>
</span><span class='line'>                                           <span class="ss">:subject</span> <span class="s">&quot;Incoming: super meta email&quot;</span>
</span><span class='line'>                                           <span class="ss">:body</span> <span class="p">(</span><span class="nb">str </span><span class="s">&quot;Czech it out bby, this code generated this email: \n\n&quot;</span>
</span><span class='line'>                                                       <span class="p">(</span><span class="nb">binding </span><span class="p">[</span><span class="nv">*out*</span> <span class="p">(</span><span class="nf">java.io.StringWriter.</span><span class="p">)]</span>
</span><span class='line'>                                                         <span class="p">(</span><span class="nf">pprint</span> <span class="nv">codez</span><span class="p">)</span>
</span><span class='line'>                                                         <span class="p">(</span><span class="nf">.toString</span> <span class="nv">*out*</span><span class="p">)))})]</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">eval </span><span class="nv">codez</span><span class="p">)))</span>
</span><span class='line'><span class="c1">;;-&gt; {:error :SUCCESS, :code 0, :message &quot;messages sent&quot;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome! That generates an email that looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Czech it out bby, this code generated this email:
</span><span class='line'>
</span><span class='line'>(postal/send-message
</span><span class='line'>{:from &quot;A really cool dude&quot;,
</span><span class='line'> :to &quot;you@yoursite.com&quot;,
</span><span class='line'> :subject &quot;Incoming: super meta email&quot;,
</span><span class='line'> :body
</span><span class='line'> (str
</span><span class='line'> &quot;Czech it out bby, this code generated this email: \n\n&quot;
</span><span class='line'> (binding
</span><span class='line'> [*out* (java.io.StringWriter.)]
</span><span class='line'> (pprint codez)
</span><span class='line'> (.toString *out*)))})
</span></code></pre></td></tr></table></div></figure>


<p>Don&rsquo;t you feel a billion times cooler now?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Predicting Algorithm Running Times]]></title>
    <link href="http://rxacevedo.github.io/blog/2014/01/26/predicting-algorithm-running-times/"/>
    <updated>2014-01-26T19:47:29-05:00</updated>
    <id>http://rxacevedo.github.io/blog/2014/01/26/predicting-algorithm-running-times</id>
    <content type="html"><![CDATA[<p>In the first week of the <a href="https://www.coursera.org/course/algs4partI">Algorithms I</a>
course on <a href="https://www.coursera.org/">Coursera</a>, we are walked through the process
of doing some mathematical analysis on an algorithm to arrive at an equation that
allows the prediction of the running time over a larger data set. This seems like
an incredibly valuable skill to me, so I wanted to walk through the example myself
so that I could fully understand the process. I started by figuring out how to
spawn system processes from within Clojure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; Using Java:</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nf">ProcessBuilder.</span> <span class="p">[</span><span class="s">&quot;java&quot;</span> <span class="s">&quot;-cp&quot;</span> <span class="s">&quot;.:stdlib.jar&quot;</span> <span class="s">&quot;ThreeSum&quot;</span>
</span><span class='line'>                      <span class="s">&quot;http://algs4.cs.princeton.edu/14analysis/1Kints.txt&quot;</span><span class="p">])</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">.directory</span> <span class="p">(</span><span class="nf">java.io.File.</span> <span class="s">&quot;/Users/Roberto/git/working/algorithms_1/ThreeSum/&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">.start</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">.getInputStream</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">slurp</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; More simply, using Clojure constructs:</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">p</span> <span class="p">(</span><span class="nf">sh</span> <span class="s">&quot;java&quot;</span> <span class="s">&quot;-cp&quot;</span> <span class="s">&quot;.:stdlib.jar&quot;</span> <span class="s">&quot;ThreeSum&quot;</span>
</span><span class='line'>            <span class="s">&quot;http://algs4.cs.princeton.edu/14analysis/1Kints.txt&quot;</span>
</span><span class='line'>            <span class="ss">:dir</span> <span class="s">&quot;/Users/Roberto/git/working/algorithms_1/ThreeSum/&quot;</span><span class="p">)]</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:out</span> <span class="nv">p</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; With that out of the way, all that&#39;s left is parse the numbers from</span>
</span><span class='line'><span class="c1">;; the output and run the same procedure over a variety of inputs.</span>
</span><span class='line'><span class="c1">;; Once we&#39;ve acquired the data, we can tabulate and/or plot it in Incanter:</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; Using this command, we can get a lazy sequence of vectors, each</span>
</span><span class='line'><span class="c1">;; containing the filename and the amount of time it took for the</span>
</span><span class='line'><span class="c1">;; process to run:</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">f</span> <span class="p">[</span><span class="s">&quot;1Kints.txt&quot;</span>
</span><span class='line'>         <span class="s">&quot;2Kints.txt&quot;</span>
</span><span class='line'>         <span class="s">&quot;4Kints.txt&quot;</span><span class="p">]</span>
</span><span class='line'>      <span class="ss">:let</span> <span class="p">[</span><span class="nv">t</span> <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">(</span><span class="ss">:out</span> <span class="p">(</span><span class="nf">sh</span> <span class="s">&quot;java&quot;</span> <span class="s">&quot;-cp&quot;</span>
</span><span class='line'>                             <span class="s">&quot;.:stdlib.jar&quot;</span>
</span><span class='line'>                             <span class="s">&quot;ThreeSum&quot;</span>
</span><span class='line'>                             <span class="p">(</span><span class="nb">str </span><span class="s">&quot;http://algs4.cs.princeton.edu/14analysis/&quot;</span> <span class="nv">f</span><span class="p">)</span>
</span><span class='line'>                             <span class="ss">:dir</span> <span class="s">&quot;/Users/Roberto/git/working/algorithms_1/ThreeSum/&quot;</span><span class="p">))</span>
</span><span class='line'>                   <span class="p">(</span><span class="nb">re-find </span><span class="o">#</span><span class="s">&quot;\d+.\d+&quot;</span><span class="p">)</span>
</span><span class='line'>                   <span class="nv">Double/parseDouble</span><span class="p">)]]</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">f</span> <span class="nv">t</span><span class="p">])</span>
</span><span class='line'><span class="c1">;; ([&quot;1Kints.txt&quot; 0.294] [&quot;2Kints.txt&quot; 2.357] [&quot;4Kints.txt&quot; 18.424])</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Now that we have the data, we can create an Incanter dataset from</span>
</span><span class='line'><span class="c1">;; it that can be used for plotting purposes.</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="p">(</span><span class="nf">to-dataset</span>
</span><span class='line'> <span class="p">[[</span><span class="mi">1000</span> <span class="mf">0.294</span><span class="p">]</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">2000</span> <span class="mf">2.357</span><span class="p">]</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">4000</span> <span class="mf">18.424</span><span class="p">]])</span>
</span><span class='line'><span class="c1">;; | :col-0 | :col-1 |</span>
</span><span class='line'><span class="c1">;; |--------+--------|</span>
</span><span class='line'><span class="c1">;; |   1000 |  0.294 |</span>
</span><span class='line'><span class="c1">;; |   2000 |  2.357 |</span>
</span><span class='line'><span class="c1">;; |   4000 | 18.424 |</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">;; If we do a log-log plot, we get a straight line, here are the</span>
</span><span class='line'><span class="c1">;; log-log data points (log base 2):</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="p">(</span><span class="nf">with-data</span> <span class="p">(</span><span class="nf">to-dataset</span> <span class="p">(</span><span class="nf">log2</span> <span class="p">(</span><span class="nf">to-matrix</span> <span class="p">(</span><span class="nf">to-dataset</span>
</span><span class='line'>                                         <span class="p">[[</span><span class="mi">1000</span> <span class="mf">0.294</span><span class="p">]</span>
</span><span class='line'>                                          <span class="p">[</span><span class="mi">2000</span> <span class="mf">2.357</span><span class="p">]</span>
</span><span class='line'>                                          <span class="p">[</span><span class="mi">4000</span> <span class="mf">18.424</span><span class="p">]]))))</span>
</span><span class='line'>  <span class="nv">$data</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; |             :col-0 |              :col-1 |</span>
</span><span class='line'><span class="c1">;; |--------------------+---------------------|</span>
</span><span class='line'><span class="c1">;; |  9.965784284662087 | -1.7661119398257226 |</span>
</span><span class='line'><span class="c1">;; | 10.965784284662087 |  1.2369517585880805 |</span>
</span><span class='line'><span class="c1">;; | 11.965784284662087 |   4.203514411130758 |</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Now we set up our equation as follows:</span>
</span><span class='line'><span class="c1">;; T(n) = ?</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; Since applying log/log yields a straight line, we can apply the</span>
</span><span class='line'><span class="c1">;; power law. The power law states that:</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; y = a (x^k) (we omit the deviation term in this example)</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; This can be rewritten as:</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; T(n) = a(n ^ b)</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; and after taking the lg of both sides, can be expressed as:</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; lg(T(n)) = b lg(n) + c</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; This looks a lot like the slope-intercept form of a line, does it</span>
</span><span class='line'><span class="c1">;; not? If we set up out equation as:</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; y = mx + b</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; The slope of the line (b in our original equation) is:</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">- </span><span class="mf">4.203514411130758</span> <span class="mf">1.2369517585880805</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">- </span><span class="mf">11.965784284662087</span> <span class="mf">10.965784284662087</span><span class="p">))</span>
</span><span class='line'><span class="c1">;; 2.9665626525426774</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; So now we can write:</span>
</span><span class='line'><span class="c1">;; lg(T(n) = 2.97 lg(n) + c</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; We can plug in some data points to solve for c:</span>
</span><span class='line'><span class="c1">;; 4.203514411130758 = 2.97 (11.965784284662087) + c</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="p">(</span><span class="nb">- </span><span class="mf">4.203514411130758</span> <span class="p">(</span><span class="nb">* </span><span class="mf">2.97</span> <span class="mf">11.965784284662087</span><span class="p">))</span>
</span><span class='line'><span class="c1">;; -31.33486491431564</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; So b = 2.97, c = -31.33</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; The final equation is then:</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; lg(T(n)) = 2.97 lg(n) - 31.33</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; We now want to get back to the form T(n) = a(n ^ b). We can use two</span>
</span><span class='line'><span class="c1">;; rules of logarithms to do that:</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; 1. a^(b + c) = (a^b)(a^c)</span>
</span><span class='line'><span class="c1">;; 2. a^(b * c) = (a^b)^c == (a^c)^b</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; We can raise 2 to the power of each side:</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; 2^lg(T(n)) = 2^(2.97 lg(n) - 31.33)</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; Using rule 1:</span>
</span><span class='line'><span class="c1">;; T(n) = 2^(2.97 lg(n)) * 2^-31.33</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; And using rule 2:</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; T(n) = (2^(lg(n)))^2.97 * 2^-31.33</span>
</span><span class='line'><span class="c1">;;      = n^2.97 * 2^-31.33</span>
</span><span class='line'><span class="c1">;;      = 3.705E-10 * n^2.97</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; Finally:</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; T(n) = 3.7045054312558825E-10 (n ^ 2.97)</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; With this, we should be able to plug in 8000 and get an approximation</span>
</span><span class='line'><span class="c1">;; of the running time:</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; T(8000) = 3.7045054312558825E-10 (8000 ^ 2.97)</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="p">(</span><span class="nb">* </span><span class="mf">3.7045054312558825</span><span class="nv">E-10</span> <span class="p">(</span><span class="nf">pow</span> <span class="mi">8000</span> <span class="mf">2.97</span><span class="p">))</span>
</span><span class='line'><span class="c1">;; 144.84633044665534 (seconds)</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; And when we run it to test our theory:</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">f</span> <span class="p">[</span><span class="s">&quot;8Kints.txt&quot;</span><span class="p">]</span>
</span><span class='line'>      <span class="ss">:let</span> <span class="p">[</span><span class="nv">t</span> <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">(</span><span class="ss">:out</span> <span class="p">(</span><span class="nf">sh</span> <span class="s">&quot;java&quot;</span> <span class="s">&quot;-cp&quot;</span>
</span><span class='line'>                             <span class="s">&quot;.:stdlib.jar&quot;</span>
</span><span class='line'>                             <span class="s">&quot;ThreeSum&quot;</span>
</span><span class='line'>                             <span class="p">(</span><span class="nb">str </span><span class="s">&quot;http://algs4.cs.princeton.edu/14analysis/&quot;</span> <span class="nv">f</span><span class="p">)</span>
</span><span class='line'>                             <span class="ss">:dir</span> <span class="s">&quot;/Users/Roberto/git/working/algorithms_1/ThreeSum/&quot;</span><span class="p">))</span>
</span><span class='line'>                   <span class="p">(</span><span class="nb">re-find </span><span class="o">#</span><span class="s">&quot;\d+.\d+&quot;</span><span class="p">)</span>
</span><span class='line'>                   <span class="nv">Double/parseDouble</span><span class="p">)]]</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">f</span> <span class="nv">t</span><span class="p">])</span>
</span><span class='line'><span class="c1">;; ([&quot;8Kints.txt&quot; 147.342])</span>
</span><span class='line'><span class="c1">;; We get what approximately what we expected.</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First-class Functions]]></title>
    <link href="http://rxacevedo.github.io/blog/2014/01/07/first-class-functions/"/>
    <updated>2014-01-07T19:25:44-05:00</updated>
    <id>http://rxacevedo.github.io/blog/2014/01/07/first-class-functions</id>
    <content type="html"><![CDATA[<p>Functions that take functions as arguments and functions that return functions
as their results can be a somewhat tricky concept to grasp coming from a
purely object-oriented style of programming. I will say up front that higher-order
functions are mostly useful for list-processing, but we will soon see
that this enables us to affect changes on data (or data structures) without
actually modifying state, which comes in quite handy when writing threaded code.</p>

<figure class='code'><figcaption><span>Le map</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nb">map </span>
</span><span class='line'><span class="c1">;; #&lt;core$map clojure.core$map@17448423&gt; </span>
</span></code></pre></td></tr></table></div></figure>


<p>Map? That&rsquo;s it? Yes, map is a function that takes a function and a number of
collections and will apply that function in one of two ways</p>

<ol>
<li>To each element of the collection &ndash; f(element)</li>
<li>To the group of elements that are at equal positions in the collections &ndash;
f(element1, element2, element3)</li>
</ol>


<p>One can easily observe the usefulness of higher-order functions (or HOFs) in this sense.
Here is a contrived example of mapping an anonymous function:</p>

<figure class='code'><figcaption><span>Our first HOF</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">assoc </span><span class="nv">%</span> <span class="ss">:cry</span> <span class="p">(</span><span class="nf">condp</span> <span class="nb">= </span><span class="p">(</span><span class="ss">:type</span> <span class="nv">%</span><span class="p">)</span>
</span><span class='line'>                      <span class="ss">:cat</span> <span class="s">&quot;Meow&quot;</span>
</span><span class='line'>                      <span class="ss">:dog</span> <span class="s">&quot;Woof&quot;</span>
</span><span class='line'>                      <span class="s">&quot;HELP&quot;</span><span class="p">))</span>
</span><span class='line'>     <span class="p">[{</span><span class="ss">:name</span> <span class="s">&quot;Spot&quot;</span> <span class="ss">:type</span> <span class="ss">:dog</span><span class="p">}</span>
</span><span class='line'>      <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Whiskers&quot;</span> <span class="ss">:type</span> <span class="ss">:cat</span><span class="p">}</span>
</span><span class='line'>      <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Leila&quot;</span> <span class="ss">:type</span> <span class="ss">:dog</span><span class="p">}</span>
</span><span class='line'>      <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Geronimo&quot;</span> <span class="ss">:type</span> <span class="ss">:cat</span><span class="p">}</span>
</span><span class='line'>      <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Izolda the Russian mail-order bride&quot;</span><span class="p">}])</span>
</span><span class='line'><span class="c1">;; ({:cry &quot;Woof&quot;, :name &quot;Spot&quot;, :type :dog} </span>
</span><span class='line'><span class="c1">;;  {:cry &quot;Meow&quot;, :name &quot;Whiskers&quot;, :type :cat} </span>
</span><span class='line'><span class="c1">;;  {:cry &quot;Woof&quot;, :name &quot;Leila&quot;, :type :dog} </span>
</span><span class='line'><span class="c1">;;  {:cry &quot;Meow&quot;, :name &quot;Geronimo&quot;, :type :cat}</span>
</span><span class='line'><span class="c1">;;  {:cry &quot;HELP&quot;, :name &quot;Izolda the Russian mail-order bride&quot;})</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Ok, we get it Roberto, there are some neat functions available in Scala and
Clojure that let us pass functions in, but why would we ever want to write our
own?</em></p>

<p>We need to think about our functions not just in terms of what they do, but how
they do it, the order that it&rsquo;s done in, and the types returned by each function
application. Let&rsquo;s write a function to obfuscate text as an example:</p>

<figure class='code'><figcaption><span>Not so HOF</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">obfuscate</span> <span class="p">[</span><span class="nv">text</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">clojure.string/join</span> <span class="p">(</span><span class="nb">interleave </span><span class="p">(</span><span class="nb">rest </span><span class="p">(</span><span class="nb">iterate rand-int </span><span class="mi">42</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">reverse </span><span class="p">(</span><span class="nb">seq </span><span class="nv">text</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or, using a threading macro for clarity (hey, some people don&rsquo;t like
the parentheses):</p>

<figure class='code'><figcaption><span>Still not so HOF</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">obfuscate</span> <span class="p">[</span><span class="nv">text</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">text</span>
</span><span class='line'>        <span class="nv">seq</span>
</span><span class='line'>        <span class="nv">reverse</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">interleave </span><span class="p">(</span><span class="nb">rest </span><span class="p">(</span><span class="nb">iterate rand-int </span><span class="mi">42</span><span class="p">)))</span>
</span><span class='line'>        <span class="nv">clojure.string/join</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are some components to this function that we would like to keep, i.e. the
call to seq to convert the string into a list of chars. But what about about the
call to reverse? We could easily omit this or replace it with another function.
We might also want to join the string back together using a character, and we
might not want to interleave with numbers, but rather with symbols. How could
we do this? We can remove these components and replace them with variables, and
then pass functions in that will be bound to those variables.</p>

<figure class='code'><figcaption><span>A higher-order function that takes a String and returns a function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">make-obfuscator</span> <span class="p">[</span><span class="nv">text</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="err">ƒ</span> <span class="p">[</span><span class="nv">f</span> <span class="nv">g</span> <span class="nv">h</span><span class="p">]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">f</span> <span class="p">(</span><span class="nf">g</span> <span class="p">(</span><span class="nf">h</span> <span class="p">(</span><span class="nb">seq </span><span class="nv">text</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are a variety of ways that one can achieve this in Scala, I am using function
currying here (each function takes a single parameter).</p>

<figure class='code'><figcaption><span>A higher-order function that takes a String and returns a function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">makeObfuscator</span><span class="o">(</span><span class="n">f</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=&gt;</span> <span class="nc">List</span><span class="o">[</span><span class="kt">Char</span><span class="o">])(</span><span class="n">g</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Char</span><span class="o">]</span> <span class="k">=&gt;</span> <span class="nc">String</span><span class="o">)(</span><span class="n">s</span><span class="k">:</span><span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">lambda</span> <span class="k">=</span> <span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">g</span><span class="o">(</span><span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">))</span>
</span><span class='line'>  <span class="n">lambda</span><span class="o">(</span><span class="n">s</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can call this function and directly pass in the functions that we want like
this:</p>

<figure class='code'><figcaption><span>Passing functions as arguments</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">((</span><span class="nf">make-obfuscator</span> <span class="nv">clojure.string/join</span> <span class="o">#</span><span class="p">(</span><span class="nb">interleave </span><span class="p">(</span><span class="nb">rest </span><span class="p">(</span><span class="nb">iterate rand-int </span><span class="mi">42</span><span class="p">))</span>
</span><span class='line'><span class="nv">%</span><span class="p">)</span> <span class="nv">reverse</span><span class="p">)</span> <span class="s">&quot;Hello&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; &quot;12o7l2l1e0H&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also harness the power of this higher-order function now, to define
multiple obfuscation functions (note: these are just examples, they are not meant to provide any sort of security):</p>

<figure class='code'><figcaption><span>MOAR OBFUSCATORS!</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">scramble</span> <span class="p">[</span><span class="nv">text</span><span class="p">]</span>
</span><span class='line'>  <span class="p">((</span><span class="nf">make-obfuscator</span> <span class="nv">clojure.string/join</span> <span class="o">#</span><span class="p">(</span><span class="nb">interleave </span><span class="p">(</span><span class="nb">rest </span><span class="p">(</span><span class="nb">iterate rand-int </span><span class="mi">42</span><span class="p">))</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">reverse</span><span class="p">)</span> <span class="nv">text</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">jumble</span> <span class="p">[</span><span class="nv">text</span><span class="p">]</span>
</span><span class='line'>  <span class="p">((</span><span class="nf">make-obfuscator</span> <span class="o">#</span><span class="p">(</span><span class="nf">clojure.string/join</span> <span class="s">&quot;_&quot;</span> <span class="nv">%</span><span class="p">)</span> <span class="o">#</span><span class="p">(</span><span class="nf">shuffle</span> <span class="p">(</span><span class="nb">seq </span><span class="nv">%</span><span class="p">))</span> <span class="nv">clojure.string/upper-case</span><span class="p">)</span> <span class="nv">text</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">move-yo-chars-every-every-char</span> <span class="p">[</span><span class="nv">text</span><span class="p">]</span>
</span><span class='line'>  <span class="p">((</span><span class="nf">make-obfuscator</span> <span class="o">#</span><span class="p">(</span><span class="nb">apply str </span><span class="p">(</span><span class="nf">shuffle</span> <span class="nv">%</span><span class="p">))</span> <span class="o">#</span><span class="p">(</span><span class="nb">interleave </span><span class="p">(</span><span class="nb">map char </span><span class="p">(</span><span class="nb">iterate inc </span><span class="mi">33</span><span class="p">))</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">reverse</span><span class="p">)</span> <span class="nv">text</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s test that they work:</p>

<figure class='code'><figcaption><span>I&#8217;m writing stuff</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">scramble</span> <span class="s">&quot;Moriturus te saluto.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; &quot;27.11o1t0u0l0a0s0 0e0t0 0s0u0r0u0t0i0r0o0M&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">jumble</span> <span class="s">&quot;Moriturus te saluto.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; &quot;S_ _ _\\_\\_P_P_ _\\_C_ _ _E_ _E_ _ _\\_ _U_ _S_A_)_ _._\\_\\_R_\\_U_\\_L__S_\\_\\_O_A_\\_ _ _\\_ _E_R_ _O_C_\\_T_\\_T_T_\\_\\_U_ _\\_I_(_S_\\_\\_M_A_\\__ &quot;</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">move-yo-chars-every-every-char</span> <span class="s">&quot;Moriturus te saluto.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; &quot;a1t # $o2ie30%.u)sr!*-,tu&amp;.Mu/t4o&#39;\&quot;r(sl+&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, higher-order functions can be used to generate many new
functions that share a common behavior pattern.</p>

<p>Here is less complex version in Scala that uses case classes to switch on message
types:</p>

<figure class='code'><figcaption><span> (Obfuscate.scala)</span> <a href='http://rxacevedo.github.io/downloads/code/scala/Obfuscate.scala'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Obfuscate</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">WikiLeaks</span><span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">NSA</span><span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">InstantMessage</span><span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">Password</span><span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">scramble</span><span class="o">(</span><span class="s">&quot;Hello!&quot;</span><span class="o">))</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">jumble</span><span class="o">(</span><span class="s">&quot;Moriturus te saluto.&quot;</span><span class="o">))</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">mungeString</span><span class="o">(</span><span class="s">&quot;I&#39;m typing words&quot;</span><span class="o">))</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Case classes\n&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="o">(</span><span class="n">wklks</span><span class="o">,</span> <span class="n">nsa</span><span class="o">,</span> <span class="n">im</span><span class="o">,</span> <span class="n">pw</span><span class="o">)</span> <span class="k">=</span> <span class="o">(</span><span class="nc">WikiLeaks</span><span class="o">(</span><span class="s">&quot;Julian Assange&quot;</span><span class="o">),</span> <span class="c1">// This is a tuple</span>
</span><span class='line'>                                <span class="nc">NSA</span><span class="o">(</span><span class="s">&quot;Edward Snowden&quot;</span><span class="o">),</span>
</span><span class='line'>                                <span class="nc">InstantMessage</span><span class="o">(</span><span class="s">&quot;OMG GUESS WHO SAID WHAT&quot;</span><span class="o">),</span>
</span><span class='line'>                                <span class="nc">Password</span><span class="o">(</span><span class="s">&quot;puppyKisses123&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;The secrets are: \n&quot;</span> <span class="o">+</span>
</span><span class='line'>      <span class="n">dispatch</span><span class="o">(</span><span class="n">wklks</span><span class="o">)</span> <span class="o">+</span>
</span><span class='line'>      <span class="s">&quot;\n&quot;</span> <span class="o">+</span>
</span><span class='line'>      <span class="n">dispatch</span><span class="o">(</span><span class="n">nsa</span><span class="o">)</span> <span class="o">+</span>
</span><span class='line'>      <span class="s">&quot;\n&quot;</span> <span class="o">+</span>
</span><span class='line'>      <span class="n">dispatch</span><span class="o">(</span><span class="n">im</span><span class="o">)</span> <span class="o">+</span>
</span><span class='line'>      <span class="s">&quot;\n&quot;</span> <span class="o">+</span> <span class="n">dispatch</span><span class="o">(</span><span class="n">pw</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">dispatch</span><span class="o">(</span><span class="n">message</span><span class="k">:</span> <span class="kt">Any</span><span class="o">)</span><span class="k">=</span> <span class="n">message</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">WikiLeaks</span><span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">scramble</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">NSA</span><span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">jumble</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">InstantMessage</span><span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">mungeString</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Password</span><span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">scramble</span><span class="o">(</span><span class="n">jumble</span><span class="o">(</span><span class="n">scramble</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="n">toString</span><span class="o">)))</span>
</span><span class='line'>      <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="s">&quot;None&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Old and boring</span>
</span><span class='line'>  <span class="c1">// def obfuscate(text: String): String = {</span>
</span><span class='line'>  <span class="c1">//   util.Random.shuffle(List.concat(text)).mkString</span>
</span><span class='line'>  <span class="c1">// }</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">makeObfuscator</span><span class="o">(</span><span class="n">f</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=&gt;</span> <span class="nc">List</span><span class="o">[</span><span class="kt">Char</span><span class="o">])(</span><span class="n">g</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Char</span><span class="o">]</span> <span class="k">=&gt;</span> <span class="nc">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">composed</span> <span class="k">=</span> <span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">g</span><span class="o">(</span><span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">))</span>
</span><span class='line'>    <span class="n">composed</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">scramble</span><span class="o">(</span><span class="n">text</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">f</span> <span class="k">=</span> <span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">util</span><span class="o">.</span><span class="nc">Random</span><span class="o">.</span><span class="n">shuffle</span><span class="o">(</span><span class="nc">List</span><span class="o">.</span><span class="n">concat</span><span class="o">(</span><span class="n">a</span><span class="o">))</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">g</span> <span class="k">=</span> <span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Char</span><span class="o">])</span> <span class="k">=&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">mkString</span>
</span><span class='line'>    <span class="n">makeObfuscator</span><span class="o">(</span><span class="n">f</span><span class="o">)(</span><span class="n">g</span><span class="o">)(</span><span class="n">text</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">jumble</span><span class="o">(</span><span class="n">text</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">f</span> <span class="k">=</span> <span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">List</span><span class="o">.</span><span class="n">concat</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">g</span> <span class="k">=</span> <span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Char</span><span class="o">])</span> <span class="k">=&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">mkString</span><span class="o">(</span><span class="s">&quot;:&gt;&gt;&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">makeObfuscator</span><span class="o">(</span><span class="n">f</span><span class="o">)(</span><span class="n">g</span><span class="o">)(</span><span class="n">text</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">mungeString</span><span class="o">(</span><span class="n">text</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">f</span> <span class="k">=</span> <span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">List</span><span class="o">.</span><span class="n">concat</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">g</span> <span class="k">=</span> <span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Char</span><span class="o">])</span> <span class="k">=&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">mkString</span><span class="o">(</span><span class="s">&quot;666&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">makeObfuscator</span><span class="o">(</span><span class="n">f</span><span class="o">)(</span><span class="n">g</span><span class="o">)(</span><span class="n">text</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala and Clojure List Operations]]></title>
    <link href="http://rxacevedo.github.io/blog/2013/12/18/scala-and-clojure-list-operations/"/>
    <updated>2013-12-18T19:32:00-05:00</updated>
    <id>http://rxacevedo.github.io/blog/2013/12/18/scala-and-clojure-list-operations</id>
    <content type="html"><![CDATA[<p>Functional programming is an incredibly powerful paradigm that empowers developers to be more flexible in the ways that they devise and implement solutions to problems. One of the most powerful features of functional programming, regardless of language, is the manner in which it allows us to interact with data structures. Provided here are some examples of &ldquo;list functions&rdquo; in both Scala and Clojure:</p>

<h2>Creating a list:</h2>

<h4>Scala</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span>
</span><span class='line'><span class="c1">// res10: List[Int] = List(1, 2, 3, 4, 5)</span>
</span></code></pre></td></tr></table></div></figure>


<p>List() is a constructor, it takes varargs and returns an immutable list (scala.collection.immutable.List). If you want a mutable list, you should use an ArrayBuffer(scala.collection.mutable.ArrayBuffer).</p>

<h4>Clojure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; (1 2 3 4 5)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Clojure embraces the use of literals for lists and maps.</p>

<h2>Filling a list:</h2>

<p>Sometimes you&rsquo;ll want to fill a list with repeated values, i.e. if you are using a list to record, say, the initial state of a game. The game state would be based on how many pieces are on the board in this case, which we represent as strings inside of a list.</p>

<h4>Scala</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nb">val </span><span class="nv">gamePieces</span><span class="err">:</span> <span class="nv">List</span><span class="p">[</span><span class="nv">String</span><span class="p">]</span> <span class="nb">= </span><span class="nv">List.fill</span><span class="p">(</span><span class="mi">10</span><span class="p">)(</span><span class="s">&quot;piece&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">//</span> <span class="nv">gamePieces</span><span class="err">:</span> <span class="nv">List</span><span class="p">[</span><span class="nv">String</span><span class="p">]</span> <span class="nb">= </span><span class="nv">List</span><span class="p">(</span><span class="nf">piece</span>, <span class="nv">piece</span>, <span class="nv">piece</span>, <span class="nv">piece</span>, <span class="nv">piece</span>, <span class="nv">piece</span>, <span class="nv">piece</span>, <span class="nv">piece</span>, <span class="nv">piece</span>, <span class="nv">piece</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Clojure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">repeat </span><span class="mi">10</span> <span class="s">&quot;piece&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; (&quot;piece&quot; &quot;piece&quot; &quot;piece&quot; &quot;piece&quot; &quot;piece&quot; &quot;piece&quot; &quot;piece&quot; &quot;piece&quot; &quot;piece&quot; &quot;piece&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Acquiring a range:</h2>

<p>In Java, one might write something like this to get a list of integers 0 &ndash; 10 exclusive:</p>

<h4>Java</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span><span class="o">[]</span> <span class="n">myInts</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">10</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">myInts</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">myInts</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Scala or Clojure, we can simplify our approach as follows:</p>

<h4>Scala</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">List</span><span class="o">.</span><span class="n">range</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">10</span><span class="o">)</span>
</span><span class='line'><span class="c1">// res13: List[Int] = List(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Clojure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">range </span><span class="mi">0</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; (0 1 2 3 4 5 6 7 8 9)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Applying functions to lists with map</h2>

<p>Most of the time, we will want to do more than just create lists,  we want to interact with the data inside of our lists, applying changes to them, etc. To do this, we can use the map function. Map takes a list and applies some function to each element in the list. Provided here are some map usage examples:</p>

<h4>Scala</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">gamePieces</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">a</span> <span class="k">=&gt;</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="c1">// res17: List[String] = List(piece1, piece1, piece1, piece1, piece1, piece1, piece1, piece1, piece1, piece1)</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Notice how in Scala, the value of 1 is coerced to a String. This is a noteworthy difference between the two. Clojure will happily compile the equivalent code for us, but will throw a ClassCastException (RuntimeException) when we attempt to invoke the method or evaluate the var:</em></p>

<h4>Clojure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">pieces</span> <span class="p">(</span><span class="nb">repeat </span><span class="mi">10</span> <span class="s">&quot;piece&quot;</span><span class="p">)]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">+ </span><span class="nv">%</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">pieces</span><span class="p">))</span>
</span><span class='line'><span class="c1">;; ClassCastException java.lang.String cannot be cast to java.lang.Number  clojure.lang.Numbers.add (Numbers.java:126)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can get around this using the str function, which will coerce its args to Strings and combine them into a single string:</p>

<h4>Clojure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">pieces</span> <span class="p">(</span><span class="nb">repeat </span><span class="mi">10</span> <span class="s">&quot;piece&quot;</span><span class="p">)]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">str </span><span class="nv">%</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">pieces</span><span class="p">))</span>
</span><span class='line'><span class="c1">;; (&quot;piece1&quot; &quot;piece1&quot; &quot;piece1&quot; &quot;piece1&quot; &quot;piece1&quot; &quot;piece1&quot; &quot;piece1&quot; &quot;piece1&quot; &quot;piece1&quot; &quot;piece1&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In both examples, you can see that I have passed some instruction to the map function, similar to a method. These are referred to as anonymous functions, or lambdas. Here we make all of our list members scream loudly:</p>

<h4>Scala</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">gamePieces</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">a</span> <span class="k">=&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">toUpperCase</span><span class="o">)</span>
</span><span class='line'><span class="c1">// res21: List[String] = List(PIECE, PIECE, PIECE, PIECE, PIECE, PIECE, PIECE, PIECE, PIECE, PIECE)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Clojure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">pieces</span> <span class="p">(</span><span class="nb">repeat </span><span class="mi">10</span> <span class="s">&quot;piece&quot;</span><span class="p">)]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">map </span><span class="nv">clojure.string/upper-case</span> <span class="nv">pieces</span><span class="p">))</span>
</span><span class='line'><span class="c1">;; (&quot;PIECE&quot; &quot;PIECE&quot; &quot;PIECE&quot; &quot;PIECE&quot; &quot;PIECE&quot; &quot;PIECE&quot; &quot;PIECE&quot; &quot;PIECE&quot; &quot;PIECE&quot; &quot;PIECE&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Getting relevant data with filter</h2>

<p>There will come a time when you will have a list and you will want to extract certain values from it. For this, we can use the filter functions that Scala and Clojure provide to slice and dice our data. Lets have some fun with an example involving Hobbits (inspired by <a href="https://twitter.com/nonrecursive">nonrecursive</a> at <a href="http://www.braveclojure.com/6-do-things/#3_10__Hobbit_Violence">braveclojure</a>):</p>

<h4>Scala</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">names</span><span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;Bilbo Baggins&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;Frodo Baggins&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;Samwise Gamgee&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;Peregrin &#39;Pippin&#39; Took&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;Meradoc &#39;Merry&#39; Brandybuck&quot;</span><span class="o">)</span>
</span><span class='line'><span class="c1">// hobbits: List[String] = List(Bilbo Baggins, Frodo Baggins, Samwise Gamgee, Peregrin &#39;Pippin&#39; Took, Meradoc &#39;Merry&#39; Brandybuck)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Clojure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[</span><span class="s">&quot;Bilbo Baggins”</span>
</span><span class='line'><span class="s"> &quot;</span><span class="nv">Frodo</span> <span class="nv">Baggins</span><span class="s">&quot;</span>
</span><span class='line'><span class="s"> &quot;</span><span class="nv">Samwise</span> <span class="nv">Gamgee</span><span class="s">&quot;</span>
</span><span class='line'><span class="s"> &quot;</span><span class="nv">Peregrin</span> <span class="ss">&#39;Pippin</span><span class="o">&#39;</span> <span class="nv">Took</span><span class="s">&quot;</span>
</span><span class='line'><span class="s"> &quot;</span><span class="nv">Meriadoc</span> <span class="ss">&#39;Merry</span><span class="o">&#39;</span> <span class="nv">Brandybuck</span><span class="s">&quot;]</span>
</span><span class='line'><span class="s">;; [&quot;</span><span class="nv">Bilbo</span> <span class="nv">Baggins</span><span class="s">&quot; &quot;</span><span class="nv">Frodo</span> <span class="nv">Baggins</span><span class="s">&quot; &quot;</span><span class="nv">Samwise</span> <span class="nv">Gamgee</span><span class="s">&quot; &quot;</span><span class="nv">Peregrin</span> <span class="ss">&#39;Pippin</span><span class="o">&#39;</span> <span class="nv">Took</span><span class="s">&quot; &quot;</span><span class="nv">Meriadoc</span> <span class="ss">&#39;Merry</span><span class="o">&#39;</span> <span class="nv">Brandybuck</span><span class="err">&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have a list of famous hobbits, great! Chance has it that I&rsquo;m throwing a special hobbit party, but only the Bagginses are invited. We need to get rid of everyone that&rsquo;s not a Baggins. Let&rsquo;s filter out the Bagginses and get with the merriment already!</p>

<h4>Scala</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">names</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="n">a</span> <span class="k">=&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">endsWith</span><span class="o">(</span><span class="s">&quot;Baggins&quot;</span><span class="o">))</span>
</span><span class='line'><span class="c1">// res77: List[String] = List(Bilbo Baggins, Frodo Baggins)</span>
</span><span class='line'><span class="c1">// Party time</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Clojure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">names</span> <span class="p">[</span><span class="s">&quot;Bilbo Baggins&quot;</span>
</span><span class='line'>             <span class="s">&quot;Frodo Baggins&quot;</span>
</span><span class='line'>             <span class="s">&quot;Samwise Gamgee&quot;</span>
</span><span class='line'>             <span class="s">&quot;Peregrin &#39;Pippin&#39; Took&quot;</span>
</span><span class='line'>             <span class="s">&quot;Meriadoc &#39;Merry&#39; Brandybuck&quot;</span><span class="p">]</span>
</span><span class='line'>      <span class="nv">bagginses</span> <span class="p">(</span><span class="nb">filter </span><span class="o">#</span><span class="p">(</span><span class="nb">re-find </span><span class="o">#</span><span class="s">&quot;.*Baggins&quot;</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">names</span><span class="p">)]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">str </span><span class="nv">%</span> <span class="s">&quot; is soOOOOOO DRUNK!!&quot;</span><span class="p">)</span> <span class="nv">bagginses</span><span class="p">))</span>
</span><span class='line'><span class="c1">;; (&quot;Bilbo Baggins is soOOOOOO DRUNK!!&quot; &quot;Frodo Baggins is soOOOOOO DRUNK!!&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome! Now let&rsquo;s turn to a slightly more complex example &ndash; let&rsquo;s take on the role of Gollum and hunt for The Ring. The goal is to kill the hobbit with the precious and take it back for us. Let&rsquo;s find and kill the dirty lying hobbitses that has our precious!</p>

<h4>Scala</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">hobbits</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Any</span><span class="o">]]</span> <span class="k">=</span> <span class="n">names</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">a</span> <span class="k">=&gt;</span> <span class="nc">Map</span><span class="o">(</span><span class="s">&quot;name&quot;</span> <span class="o">-&gt;</span> <span class="n">a</span><span class="o">,</span> <span class="s">&quot;height&quot;</span> <span class="o">-&gt;</span> <span class="s">&quot;small&quot;</span><span class="o">,</span> <span class="s">&quot;hairyFeet&quot;</span> <span class="o">-&gt;</span> <span class="kc">true</span><span class="o">,</span> <span class="s">&quot;hasPrecious?&quot;</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="n">startsWith</span> <span class="s">&quot;Frodo&quot;</span><span class="o">)</span> <span class="kc">true</span> <span class="k">else</span> <span class="kc">false</span><span class="o">)))</span>
</span><span class='line'><span class="c1">// res83: List[scala.collection.immutable.Map[String,Any]] = </span>
</span><span class='line'><span class="c1">// List(Map(name -&gt; Bilbo Baggins, height -&gt; small, hairyFeet? -&gt; true, hasPrecious? -&gt; false), </span>
</span><span class='line'><span class="c1">//      Map(name -&gt; Frodo Baggins, height -&gt; small, hairyFeet? -&gt; true, hasPrecious? -&gt; true), </span>
</span><span class='line'><span class="c1">//      Map(name -&gt; Samwise Gamgee, height -&gt; small, hairyFeet? -&gt; true, hasPrus? -&gt; false), </span>
</span><span class='line'><span class="c1">//      Map(name -&gt; Peregrin &#39;Pippin&#39; Took, height -&gt; small, hairyFeet? -&gt; true, hasPrecious? -&gt; false), </span>
</span><span class='line'><span class="c1">//      Map(name -&gt; Meradoc &#39;Merry&#39; Brandybuck, height -&gt; small, hairyFeet? -&gt; true, hasPrecious? -&gt; false))</span>
</span><span class='line'>
</span><span class='line'><span class="n">hobbits</span><span class="o">.</span><span class="n">filter</span><span class="o">((</span><span class="n">a</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Any</span><span class="o">])</span> <span class="k">=&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;hasPrecious?&quot;</span><span class="o">)</span> <span class="o">==</span> <span class="nc">Some</span><span class="o">(</span><span class="kc">false</span><span class="o">))</span>
</span><span class='line'><span class="c1">// res84: List[Map[String,Any]] = </span>
</span><span class='line'><span class="c1">// List(Map(name -&gt; Bilbo Baggins, height -&gt; small, hairyFeet -&gt; true, hasPrecious? -&gt; false), </span>
</span><span class='line'><span class="c1">//      Map(name -&gt; Samwise Gamgee, height -&gt; small, hairyFeet -&gt; true, hasPrecious? -&gt; false), </span>
</span><span class='line'><span class="c1">//      Map(name -&gt; Peregrin &#39;Pippin&#39; Took, height -&gt; small, hairyFeet -&gt; true, hasPrecious? -&gt; false), </span>
</span><span class='line'><span class="c1">//      Map(name -&gt; Meradoc &#39;Merry&#39; Brandybuck, height -&gt; small, hairyFeet -&gt; true, hasPrecious? -&gt; false))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Having to deal with Some() is kind of ugly, so instead of a mixed-value map, we’ll switch to a case class. Here is the full implementation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">KillHobbits</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Hobbit</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">height</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">hairyFeet</span><span class="k">:</span> <span class="kt">Boolean</span><span class="o">,</span> <span class="n">hasPrecious</span><span class="k">:</span> <span class="kt">Boolean</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">names</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;Bilbo Baggins&quot;</span><span class="o">,</span>
</span><span class='line'>                                   <span class="s">&quot;Frodo Baggins&quot;</span><span class="o">,</span>
</span><span class='line'>                                   <span class="s">&quot;Samwise Gamgee&quot;</span><span class="o">,</span>
</span><span class='line'>                                   <span class="s">&quot;Peregrin &#39;Pippin&#39; Took&quot;</span><span class="o">,</span>
</span><span class='line'>                                   <span class="s">&quot;Meradoc &#39;Merry&#39; Brandybuck&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">hobbits</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Hobbit</span><span class="o">]</span> <span class="k">=</span> <span class="n">makeHobbits</span><span class="o">(</span><span class="n">names</span><span class="o">)</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Before killing off the one holding the ring...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">hobbits</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">a</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">a</span><span class="o">))</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">killTheRingKeeper</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Hobbit</span><span class="o">]</span> <span class="k">=</span> <span class="n">hobbits</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="n">a</span> <span class="k">=&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">hasPrecious</span> <span class="o">==</span> <span class="kc">false</span><span class="o">)</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;\nDie dirty hobbitses!&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">killTheRingKeeper</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">a</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">a</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">makeHobbits</span><span class="o">(</span><span class="n">names</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Hobbit</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">names</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">a</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="nc">Hobbit</span><span class="o">(</span><span class="n">name</span> <span class="k">=</span> <span class="n">a</span><span class="o">,</span>
</span><span class='line'>             <span class="n">height</span> <span class="k">=</span> <span class="s">&quot;hobbit-sized&quot;</span><span class="o">,</span>
</span><span class='line'>             <span class="n">hairyFeet</span> <span class="k">=</span> <span class="kc">true</span><span class="o">,</span>
</span><span class='line'>             <span class="n">hasPrecious</span> <span class="k">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="n">startsWith</span> <span class="s">&quot;Frodo&quot;</span><span class="o">)</span> <span class="kc">true</span> <span class="k">else</span> <span class="kc">false</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>Clojure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">names</span> <span class="p">[</span><span class="s">&quot;Bilbo Baggins&quot;</span>
</span><span class='line'>             <span class="s">&quot;Frodo Baggins&quot;</span>
</span><span class='line'>             <span class="s">&quot;Samwise Gamgee&quot;</span>
</span><span class='line'>             <span class="s">&quot;Peregrin &#39;Pippin&#39; Took&quot;</span>
</span><span class='line'>             <span class="s">&quot;Meriadoc &#39;Merry&#39; Brandybuck&quot;</span><span class="p">]</span>
</span><span class='line'>      <span class="nv">hobbits</span> <span class="p">(</span><span class="nf">vec</span> <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">hash-map </span><span class="ss">:name</span> <span class="nv">%</span>
</span><span class='line'>                                   <span class="ss">:height</span> <span class="s">&quot;hobbit-sized&quot;</span>
</span><span class='line'>                                   <span class="ss">:hairy-feet?</span> <span class="nv">true</span>
</span><span class='line'>                                   <span class="ss">:has-precious?</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">%</span> <span class="s">&quot;Frodo Baggins&quot;</span><span class="p">)</span> <span class="nv">true</span>
</span><span class='line'>                                                      <span class="nv">false</span><span class="p">))</span> <span class="nv">names</span><span class="p">))]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">filter </span><span class="ss">:has-precious?</span> <span class="nv">hobbits</span><span class="p">))</span>
</span><span class='line'><span class="c1">;; ({:name &quot;Frodo Baggins&quot;, :hairy-feet? true, :has-precious? true, :height &quot;hobbit-sized&quot;})</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Tale of Two Languages]]></title>
    <link href="http://rxacevedo.github.io/blog/2013/10/20/a-tale-of-two-languages/"/>
    <updated>2013-10-20T10:51:00-04:00</updated>
    <id>http://rxacevedo.github.io/blog/2013/10/20/a-tale-of-two-languages</id>
    <content type="html"><![CDATA[<p>I&rsquo;m fortunate enough to be part of a team at work that is researching a new JVM language for us to potentially move to in the future. Since it&rsquo;s fun for me, I figured I may as well document the process.</p>

<p>We&rsquo;re a Java shop with developers of varying skill levels, but there hasn&rsquo;t much concentration in other
languages or paradigms. Many of those on my team have been
writing OOP for the past 5-10 years, so I am excited to see how the
transition from the <a href="http://docs.spring.io/spring/docs/2.0.x/api/org/springframework/orm/jdo/TransactionAwarePersistenceManagerFactoryProxy.html">Java way</a>
where every behavior is coupled with an object, to a more
behavior-oriented approach (myself included, as I did not know Java or have any professional experience as a programmer when I started). The two languages that we&rsquo;ve opted to look
into are <a href="http://www.scala-lang.org/">Scala</a> and
<a href="http://clojure.org/">Clojure</a>.</p>

<p>The main reason for to even consider adopting a new language is, most importantly, to enable developers to approach concurrent development. As Martin Odersky says, &ldquo;the flood is rising.&rdquo;</p>

<p>As an example, I opted for a tree-recursive algorithm, to see how each language would handle it. If you&rsquo;ve taken the Functional Programming in Scala course on Coursera, you will recognize this problem:</p>

<figure class='code'><figcaption><span>Counting change in Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Change</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">amt</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">denoms</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="n">denoms</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="n">denoms</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
</span><span class='line'>    <span class="n">denoms</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'>    <span class="n">denoms</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
</span><span class='line'>    <span class="n">denoms</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">50</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ways</span> <span class="o">=</span> <span class="n">countChange</span><span class="o">(</span><span class="n">amt</span><span class="o">,</span> <span class="n">denoms</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">finish</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Amount: &quot;</span> <span class="o">+</span> <span class="n">amt</span> <span class="o">+</span> <span class="s">&quot;\nWays to make change: &quot;</span> <span class="o">+</span> <span class="n">ways</span> <span class="o">+</span> <span class="s">&quot;\nTime: &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">finish</span> <span class="o">-</span> <span class="n">start</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">countChange</span><span class="o">(</span><span class="kt">int</span> <span class="n">amt</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">denoms</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">amt</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">amt</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">denoms</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nf">countChange</span><span class="o">(</span><span class="n">amt</span> <span class="o">-</span> <span class="n">denoms</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">),</span> <span class="n">denoms</span><span class="o">)</span> <span class="o">+</span> <span class="n">countChange</span><span class="o">(</span><span class="n">amt</span><span class="o">,</span> <span class="n">denoms</span><span class="o">.</span><span class="na">subList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">denoms</span><span class="o">.</span><span class="na">size</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The same logic implemented in Scala looks like this:</p>

<figure class='code'><figcaption><span>Counting change in Scala</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.compat.Platform</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Change</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">amt</span> <span class="k">=</span> <span class="n">args</span><span class="o">.</span><span class="n">head</span><span class="o">.</span><span class="n">toInt</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">start</span> <span class="k">=</span> <span class="nc">Platform</span><span class="o">.</span><span class="n">currentTime</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">ways</span> <span class="k">=</span> <span class="n">countChange</span><span class="o">(</span><span class="n">amt</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">,</span> <span class="mi">50</span><span class="o">))</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">finish</span> <span class="k">=</span> <span class="nc">Platform</span><span class="o">.</span><span class="n">currentTime</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Amount: &quot;</span> <span class="o">+</span> <span class="n">amt</span> <span class="o">+</span> <span class="s">&quot;\nWays to make change: &quot;</span> <span class="o">+</span> <span class="n">ways</span> <span class="o">+</span> <span class="s">&quot;\nTime: &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">finish</span> <span class="o">-</span> <span class="n">start</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">countChange</span><span class="o">(</span><span class="n">amt</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">denoms</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">])</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">amt</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>  <span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">amt</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">denoms</span><span class="o">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">else</span> <span class="n">countChange</span><span class="o">(</span><span class="n">amt</span><span class="o">,</span> <span class="n">denoms</span><span class="o">.</span><span class="n">tail</span><span class="o">)</span> <span class="o">+</span> <span class="n">countChange</span><span class="o">(</span><span class="n">amt</span> <span class="o">-</span> <span class="n">denoms</span><span class="o">.</span><span class="n">head</span><span class="o">,</span> <span class="n">denoms</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally, Clojure:</p>

<figure class='code'><figcaption><span>Counting change in Clojure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">change.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:gen-class</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">count-change</span> <span class="p">[</span><span class="nv">amt</span> <span class="nv">denoms</span><span class="p">]</span>
</span><span class='line'><span class="s">&quot;Returns the number of ways to make change for a given amount using a tree-recursive process&quot;</span>
</span><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">f</span> <span class="p">(</span><span class="k">fn </span><span class="nv">inner</span> <span class="p">[</span><span class="nv">amt</span> <span class="nv">denoms</span><span class="p">]</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">cond </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">amt</span><span class="p">)</span> <span class="mi">1</span>
</span><span class='line'>                 <span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">amt</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">= </span><span class="nv">nil</span> <span class="p">(</span><span class="nb">seq </span><span class="nv">denoms</span><span class="p">)))</span> <span class="mi">0</span>
</span><span class='line'>                 <span class="ss">:else</span> <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">less-amt</span> <span class="p">(</span><span class="nb">- </span><span class="nv">amt</span> <span class="p">(</span><span class="nb">first </span><span class="nv">denoms</span><span class="p">))</span>
</span><span class='line'>                             <span class="nv">less-denoms</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">denoms</span><span class="p">)]</span>
</span><span class='line'>                         <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">inner</span> <span class="nv">amt</span> <span class="nv">less-denoms</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">(</span><span class="nf">inner</span> <span class="nv">less-amt</span> <span class="nv">denoms</span><span class="p">)))))]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">f</span> <span class="nv">amt</span> <span class="nv">denoms</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span>
</span><span class='line'>  <span class="s">&quot;I don&#39;t do a whole lot ... yet.&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">amt</span> <span class="p">(</span><span class="nf">read-string</span> <span class="p">(</span><span class="nb">first </span><span class="nv">args</span><span class="p">))</span>
</span><span class='line'>              <span class="nv">ways</span> <span class="p">(</span><span class="nf">count-change</span> <span class="nv">amt</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">5</span> <span class="mi">10</span> <span class="mi">20</span> <span class="mi">50</span><span class="p">])]</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;Amount: &quot;</span> <span class="nv">amt</span> <span class="s">&quot;\nWays: &quot;</span> <span class="nv">ways</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>So how long does this process take to run for each implementation? Here are the compilations (first JDK Version):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java version <span class="s2">&quot;1.7.0_25&quot;</span>
</span><span class='line'>Java<span class="o">(</span>TM<span class="o">)</span> SE Runtime Environment <span class="o">(</span>build 1.7.0_25-b15<span class="o">)</span>
</span><span class='line'>Java HotSpot<span class="o">(</span>TM<span class="o">)</span> 64-Bit Server VM <span class="o">(</span>build 23.25-b01, mixed mode<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Scala:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>scalac Change.scala <span class="o">&amp;&amp;</span> <span class="k">for </span>i in <span class="k">$(</span>cat sizes.txt<span class="k">)</span>; <span class="k">do </span>scala Change <span class="nv">$i</span>; <span class="k">done</span>
</span><span class='line'><span class="c"># Note - Scala passess -Xmx256M -Xms32M to Java, so I did the same for the other two</span>
</span></code></pre></td></tr></table></div></figure>


<p>Java:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>javac Change.java <span class="o">&amp;&amp;</span> <span class="k">for </span>i in <span class="k">$(</span>cat sizes.txt<span class="k">)</span>; <span class="k">do </span>java -Xmx256M -Xms32M Change <span class="nv">$i</span>; <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>Clojure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java -cp src/:/usr/local/Cellar/clojure/1.5.1/clojure-1.5.1.jar -Dclojure.compile.path<span class="o">=</span>classes clojure.lang.Compile change.core
</span><span class='line'>Compiling change.core to classes
</span><span class='line'><span class="k">for </span>i in <span class="k">$(</span>cat sizes.txt<span class="k">)</span>; <span class="k">do </span>java -Xmx256M -Xms32M -cp classes/:/usr/local/Cellar/clojure/1.5.1/clojure-1.5.1.jar change.core <span class="nv">$i</span>; <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the results (in milliseconds):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'># Java
</span><span class='line'>Amount: 128
</span><span class='line'>Ways to make change: 658
</span><span class='line'>Time: 14
</span><span class='line'>Amount: 256
</span><span class='line'>Ways to make change: 6630
</span><span class='line'>Time: 25
</span><span class='line'>Amount: 512
</span><span class='line'>Ways to make change: 78694
</span><span class='line'>Time: 162
</span><span class='line'>Amount: 1024
</span><span class='line'>Ways to make change: 1070685
</span><span class='line'>Time: 3083
</span><span class='line'>Amount: 2048
</span><span class='line'>Ways to make change: 15894424
</span><span class='line'>Time: 80155
</span><span class='line'>Amount: 4096
</span><span class='line'>Ways to make change: 244782054
</span><span class='line'>Time: 2860846
</span><span class='line'>
</span><span class='line'># Scala
</span><span class='line'>Amount: 128
</span><span class='line'>Ways to make change: 658
</span><span class='line'>Time: 12
</span><span class='line'>Amount: 256
</span><span class='line'>Ways to make change: 6630
</span><span class='line'>Time: 16
</span><span class='line'>Amount: 512
</span><span class='line'>Ways to make change: 78694
</span><span class='line'>Time: 89
</span><span class='line'>Amount: 1024
</span><span class='line'>Ways to make change: 1070685
</span><span class='line'>Time: 1777
</span><span class='line'>Amount: 2048
</span><span class='line'>Ways to make change: 15894424
</span><span class='line'>Time: 46779
</span><span class='line'>Amount: 4096
</span><span class='line'>Ways to make change: 244782054
</span><span class='line'>Time: 1422710
</span><span class='line'>
</span><span class='line'># Clojure
</span><span class='line'>Amount: 128
</span><span class='line'>Ways: 658
</span><span class='line'>&quot;Elapsed time: 104.863 msecs&quot;
</span><span class='line'>Amount: 256
</span><span class='line'>Ways: 6630
</span><span class='line'>&quot;Elapsed time: 124.266 msecs&quot;
</span><span class='line'>Amount: 512
</span><span class='line'>Ways: 78694
</span><span class='line'>&quot;Elapsed time: 561.276 msecs&quot;
</span><span class='line'>Amount: 1024
</span><span class='line'>Ways: 1070685
</span><span class='line'>&quot;Elapsed time: 9900.2 msecs&quot;
</span><span class='line'>Amount: 2048
</span><span class='line'>Ways: 15894424
</span><span class='line'>&quot;Elapsed time: 258364.033 msecs&quot;
</span><span class='line'># I got tired of waiting for it to compute the answer for 4096, I&#39;ll just call it &quot;a long long time&quot;
</span></code></pre></td></tr></table></div></figure>


<p>Scala is 2x as fast as Java, Clojure is 3.2x slower than Java and 5.5x slower than Scala (for this problem), ouch! Maybe the bytecode will shed some light on things:</p>

<figure class='code'><figcaption><span>Java bytecode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>  public static int countChange(int, java.util.List&lt;java.lang.Integer&gt;);
</span><span class='line'>    Signature: (ILjava/util/List;)I
</span><span class='line'>    flags: ACC_PUBLIC, ACC_STATIC
</span><span class='line'>    Code:
</span><span class='line'>      stack=5, locals=2, args_size=2
</span><span class='line'>         0: iload_0
</span><span class='line'>         1: ifne          6
</span><span class='line'>         4: iconst_1
</span><span class='line'>         5: ireturn
</span><span class='line'>         6: iload_0
</span><span class='line'>         7: iflt          19
</span><span class='line'>        10: aload_1
</span><span class='line'>        11: invokeinterface #20,  1           // InterfaceMethod java/util/List.size:()I
</span><span class='line'>        16: ifne          21
</span><span class='line'>        19: iconst_0
</span><span class='line'>        20: ireturn
</span><span class='line'>        21: iload_0
</span><span class='line'>        22: aload_1
</span><span class='line'>        23: iconst_0
</span><span class='line'>        24: invokeinterface #21,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
</span><span class='line'>        29: checkcast     #22                 // class java/lang/Integer
</span><span class='line'>        32: invokevirtual #23                 // Method java/lang/Integer.intValue:()I
</span><span class='line'>        35: isub
</span><span class='line'>        36: aload_1
</span><span class='line'>        37: invokestatic  #8                  // Method countChange:(ILjava/util/List;)I
</span><span class='line'>        40: iload_0
</span><span class='line'>        41: aload_1
</span><span class='line'>        42: iconst_1
</span><span class='line'>        43: aload_1
</span><span class='line'>        44: invokeinterface #20,  1           // InterfaceMethod java/util/List.size:()I
</span><span class='line'>        49: invokeinterface #24,  3           // InterfaceMethod java/util/List.subList:(II)Ljava/util/List;
</span><span class='line'>        54: invokestatic  #8                  // Method countChange:(ILjava/util/List;)I
</span><span class='line'>        57: iadd
</span><span class='line'>        58: ireturn
</span><span class='line'>      LineNumberTable:
</span><span class='line'>        line 21: 0
</span><span class='line'>        line 22: 4
</span><span class='line'>        line 23: 6
</span><span class='line'>        line 24: 19
</span><span class='line'>        line 26: 21
</span><span class='line'>      StackMapTable: number_of_entries = 3
</span><span class='line'>           frame_type = 6 /* same */
</span><span class='line'>           frame_type = 12 /* same */
</span><span class='line'>           frame_type = 1 /* same */
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Scala bytecode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'> public int countChange(int, scala.collection.immutable.List&lt;java.lang.Object&gt;);
</span><span class='line'>    Signature: (ILscala/collection/immutable/List;)I
</span><span class='line'>    flags: ACC_PUBLIC
</span><span class='line'>    Code:
</span><span class='line'>      stack=4, locals=3, args_size=3
</span><span class='line'>         0: iload_1
</span><span class='line'>         1: iconst_0
</span><span class='line'>         2: if_icmpne     9
</span><span class='line'>         5: iconst_1
</span><span class='line'>         6: goto          53
</span><span class='line'>         9: iload_1
</span><span class='line'>        10: iconst_0
</span><span class='line'>        11: if_icmplt     22
</span><span class='line'>        14: aload_2
</span><span class='line'>        15: invokevirtual #117                // Method scala/collection/immutable/List.length:()I
</span><span class='line'>        18: iconst_0
</span><span class='line'>        19: if_icmpne     26
</span><span class='line'>        22: iconst_0
</span><span class='line'>        23: goto          53
</span><span class='line'>        26: aload_0
</span><span class='line'>        27: iload_1
</span><span class='line'>        28: aload_2
</span><span class='line'>        29: invokevirtual #120                // Method scala/collection/immutable/List.tail:()Ljava/lang/Object;
</span><span class='line'>        32: checkcast     #114                // class scala/collection/immutable/List
</span><span class='line'>        35: invokevirtual #72                 // Method countChange:(ILscala/collection/immutable/List;)I
</span><span class='line'>        38: aload_0
</span><span class='line'>        39: iload_1
</span><span class='line'>        40: aload_2
</span><span class='line'>        41: invokevirtual #121                // Method scala/collection/immutable/List.head:()Ljava/lang/Object;
</span><span class='line'>        44: invokestatic  #125                // Method scala/runtime/BoxesRunTime.unboxToInt:(Ljava/lang/Object;)I
</span><span class='line'>        47: isub
</span><span class='line'>        48: aload_2
</span><span class='line'>        49: invokevirtual #72                 // Method countChange:(ILscala/collection/immutable/List;)I
</span><span class='line'>        52: iadd
</span><span class='line'>        53: ireturn
</span><span class='line'>      LocalVariableTable:
</span><span class='line'>        Start  Length  Slot  Name   Signature
</span><span class='line'>               0      54     0  this   LChange$;
</span><span class='line'>               0      54     1   amt   I
</span><span class='line'>               0      54     2 denoms   Lscala/collection/immutable/List;
</span><span class='line'>      LineNumberTable:
</span><span class='line'>        line 14: 0
</span><span class='line'>        line 15: 9
</span><span class='line'>        line 16: 26
</span><span class='line'>        line 14: 53
</span><span class='line'>      StackMapTable: number_of_entries = 4
</span><span class='line'>           frame_type = 9 /* same */
</span><span class='line'>           frame_type = 12 /* same */
</span><span class='line'>           frame_type = 3 /* same */
</span><span class='line'>           frame_type = 90 /* same_locals_1_stack_item */
</span><span class='line'>          stack = [ int ]
</span></code></pre></td></tr></table></div></figure>


<p>In Clojure, anonymous functions are compiled into their own class files, so I guess I should include the entire <code>javap</code> output for the fn I defined (inner):</p>

<figure class='code'><figcaption><span>Clojure bytecode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Compiled from &quot;core.clj&quot;
</span><span class='line'>public final class change.core$count_change$inner__4 extends clojure.lang.AFunction {
</span><span class='line'>  public static final clojure.lang.Var const__0;
</span><span class='line'>    Signature: Lclojure/lang/Var;
</span><span class='line'>
</span><span class='line'>  public static final java.lang.Object const__1;
</span><span class='line'>    Signature: Ljava/lang/Object;
</span><span class='line'>
</span><span class='line'>  public static final clojure.lang.Var const__2;
</span><span class='line'>    Signature: Lclojure/lang/Var;
</span><span class='line'>
</span><span class='line'>  public static final java.lang.Object const__3;
</span><span class='line'>    Signature: Ljava/lang/Object;
</span><span class='line'>
</span><span class='line'>  public static final clojure.lang.Var const__4;
</span><span class='line'>    Signature: Lclojure/lang/Var;
</span><span class='line'>
</span><span class='line'>  public static final clojure.lang.Var const__5;
</span><span class='line'>    Signature: Lclojure/lang/Var;
</span><span class='line'>
</span><span class='line'>  public static final clojure.lang.Keyword const__6;
</span><span class='line'>    Signature: Lclojure/lang/Keyword;
</span><span class='line'>
</span><span class='line'>  public static final clojure.lang.Var const__7;
</span><span class='line'>    Signature: Lclojure/lang/Var;
</span><span class='line'>
</span><span class='line'>  public static final clojure.lang.Var const__8;
</span><span class='line'>    Signature: Lclojure/lang/Var;
</span><span class='line'>
</span><span class='line'>  public static final clojure.lang.Var const__9;
</span><span class='line'>    Signature: Lclojure/lang/Var;
</span><span class='line'>
</span><span class='line'>  public static final clojure.lang.Var const__10;
</span><span class='line'>    Signature: Lclojure/lang/Var;
</span><span class='line'>
</span><span class='line'>  public static {};
</span><span class='line'>    Signature: ()V
</span><span class='line'>    Code:
</span><span class='line'>       0: ldc           #23                 // String clojure.core
</span><span class='line'>       2: ldc           #25                 // String zero?
</span><span class='line'>       4: invokestatic  #31                 // Method clojure/lang/RT.var:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
</span><span class='line'>       7: checkcast     #33                 // class clojure/lang/Var
</span><span class='line'>      10: putstatic     #35                 // Field const__0:Lclojure/lang/Var;
</span><span class='line'>      13: lconst_1
</span><span class='line'>      14: invokestatic  #41                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
</span><span class='line'>      17: putstatic     #43                 // Field const__1:Ljava/lang/Object;
</span><span class='line'>      20: ldc           #23                 // String clojure.core
</span><span class='line'>      22: ldc           #45                 // String &lt;
</span><span class='line'>      24: invokestatic  #31                 // Method clojure/lang/RT.var:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
</span><span class='line'>      27: checkcast     #33                 // class clojure/lang/Var
</span><span class='line'>      30: putstatic     #47                 // Field const__2:Lclojure/lang/Var;
</span><span class='line'>      33: lconst_0
</span><span class='line'>      34: invokestatic  #41                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
</span><span class='line'>      37: putstatic     #49                 // Field const__3:Ljava/lang/Object;
</span><span class='line'>      40: ldc           #23                 // String clojure.core
</span><span class='line'>      42: ldc           #51                 // String =
</span><span class='line'>      44: invokestatic  #31                 // Method clojure/lang/RT.var:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
</span><span class='line'>      47: checkcast     #33                 // class clojure/lang/Var
</span><span class='line'>      50: putstatic     #53                 // Field const__4:Lclojure/lang/Var;
</span><span class='line'>      53: ldc           #23                 // String clojure.core
</span><span class='line'>      55: ldc           #55                 // String seq
</span><span class='line'>      57: invokestatic  #31                 // Method clojure/lang/RT.var:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
</span><span class='line'>      60: checkcast     #33                 // class clojure/lang/Var
</span><span class='line'>      63: putstatic     #57                 // Field const__5:Lclojure/lang/Var;
</span><span class='line'>      66: aconst_null
</span><span class='line'>      67: ldc           #59                 // String else
</span><span class='line'>      69: invokestatic  #63                 // Method clojure/lang/RT.keyword:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
</span><span class='line'>      72: checkcast     #65                 // class clojure/lang/Keyword
</span><span class='line'>      75: putstatic     #67                 // Field const__6:Lclojure/lang/Keyword;
</span><span class='line'>      78: ldc           #23                 // String clojure.core
</span><span class='line'>      80: ldc           #69                 // String -
</span><span class='line'>      82: invokestatic  #31                 // Method clojure/lang/RT.var:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
</span><span class='line'>      85: checkcast     #33                 // class clojure/lang/Var
</span><span class='line'>      88: putstatic     #71                 // Field const__7:Lclojure/lang/Var;
</span><span class='line'>      91: ldc           #23                 // String clojure.core
</span><span class='line'>      93: ldc           #73                 // String first
</span><span class='line'>      95: invokestatic  #31                 // Method clojure/lang/RT.var:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
</span><span class='line'>      98: checkcast     #33                 // class clojure/lang/Var
</span><span class='line'>     101: putstatic     #75                 // Field const__8:Lclojure/lang/Var;
</span><span class='line'>     104: ldc           #23                 // String clojure.core
</span><span class='line'>     106: ldc           #77                 // String rest
</span><span class='line'>     108: invokestatic  #31                 // Method clojure/lang/RT.var:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
</span><span class='line'>     111: checkcast     #33                 // class clojure/lang/Var
</span><span class='line'>     114: putstatic     #79                 // Field const__9:Lclojure/lang/Var;
</span><span class='line'>     117: ldc           #23                 // String clojure.core
</span><span class='line'>     119: ldc           #81                 // String +
</span><span class='line'>     121: invokestatic  #31                 // Method clojure/lang/RT.var:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
</span><span class='line'>     124: checkcast     #33                 // class clojure/lang/Var
</span><span class='line'>     127: putstatic     #83                 // Field const__10:Lclojure/lang/Var;
</span><span class='line'>     130: return
</span><span class='line'>
</span><span class='line'>  public change.core$count_change$inner__4();
</span><span class='line'>    Signature: ()V
</span><span class='line'>    Code:
</span><span class='line'>       0: aload_0
</span><span class='line'>       1: invokespecial #86                 // Method clojure/lang/AFunction.&quot;&lt;init&gt;&quot;:()V
</span><span class='line'>       4: return
</span><span class='line'>
</span><span class='line'>  public java.lang.Object invoke(java.lang.Object, java.lang.Object);
</span><span class='line'>    Signature: (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
</span><span class='line'>    Code:
</span><span class='line'>       0: aload_1
</span><span class='line'>       1: invokestatic  #94                 // Method clojure/lang/Numbers.isZero:(Ljava/lang/Object;)Z
</span><span class='line'>       4: ifeq          14
</span><span class='line'>       7: getstatic     #43                 // Field const__1:Ljava/lang/Object;
</span><span class='line'>      10: goto          148
</span><span class='line'>      13: pop
</span><span class='line'>      14: aload_1
</span><span class='line'>      15: lconst_0
</span><span class='line'>      16: invokestatic  #98                 // Method clojure/lang/Numbers.lt:(Ljava/lang/Object;J)Z
</span><span class='line'>      19: istore_3
</span><span class='line'>      20: iload_3
</span><span class='line'>      21: ifeq          29
</span><span class='line'>      24: iload_3
</span><span class='line'>      25: goto          48
</span><span class='line'>      28: pop
</span><span class='line'>      29: aconst_null
</span><span class='line'>      30: getstatic     #57                 // Field const__5:Lclojure/lang/Var;
</span><span class='line'>      33: invokevirtual #102                // Method clojure/lang/Var.getRawRoot:()Ljava/lang/Object;
</span><span class='line'>      36: checkcast     #104                // class clojure/lang/IFn
</span><span class='line'>      39: aload_2
</span><span class='line'>      40: invokeinterface #107,  2          // InterfaceMethod clojure/lang/IFn.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
</span><span class='line'>      45: invokestatic  #113                // Method clojure/lang/Util.equiv:(Ljava/lang/Object;Ljava/lang/Object;)Z
</span><span class='line'>      48: ifeq          58
</span><span class='line'>      51: getstatic     #49                 // Field const__3:Ljava/lang/Object;
</span><span class='line'>      54: goto          148
</span><span class='line'>      57: pop
</span><span class='line'>      58: getstatic     #67                 // Field const__6:Lclojure/lang/Keyword;
</span><span class='line'>      61: dup
</span><span class='line'>      62: ifnull        146
</span><span class='line'>      65: getstatic     #121                // Field java/lang/Boolean.FALSE:Ljava/lang/Boolean;
</span><span class='line'>      68: if_acmpeq     147
</span><span class='line'>      71: aload_1
</span><span class='line'>      72: getstatic     #75                 // Field const__8:Lclojure/lang/Var;
</span><span class='line'>      75: invokevirtual #102                // Method clojure/lang/Var.getRawRoot:()Ljava/lang/Object;
</span><span class='line'>      78: checkcast     #104                // class clojure/lang/IFn
</span><span class='line'>      81: aload_2
</span><span class='line'>      82: invokeinterface #107,  2          // InterfaceMethod clojure/lang/IFn.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
</span><span class='line'>      87: invokestatic  #125                // Method clojure/lang/Numbers.minus:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Number;
</span><span class='line'>      90: astore_3
</span><span class='line'>      91: getstatic     #79                 // Field const__9:Lclojure/lang/Var;
</span><span class='line'>      94: invokevirtual #102                // Method clojure/lang/Var.getRawRoot:()Ljava/lang/Object;
</span><span class='line'>      97: checkcast     #104                // class clojure/lang/IFn
</span><span class='line'>     100: aload_2
</span><span class='line'>     101: invokeinterface #107,  2          // InterfaceMethod clojure/lang/IFn.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
</span><span class='line'>     106: astore        4
</span><span class='line'>     108: aload_0
</span><span class='line'>     109: checkcast     #104                // class clojure/lang/IFn
</span><span class='line'>     112: aload_1
</span><span class='line'>     113: aconst_null
</span><span class='line'>     114: astore_1
</span><span class='line'>     115: aload         4
</span><span class='line'>     117: aconst_null
</span><span class='line'>     118: astore        4
</span><span class='line'>     120: invokeinterface #127,  3          // InterfaceMethod clojure/lang/IFn.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
</span><span class='line'>     125: aload_0
</span><span class='line'>     126: checkcast     #104                // class clojure/lang/IFn
</span><span class='line'>     129: aload_3
</span><span class='line'>     130: aconst_null
</span><span class='line'>     131: astore_3
</span><span class='line'>     132: aload_2
</span><span class='line'>     133: aconst_null
</span><span class='line'>     134: astore_2
</span><span class='line'>     135: invokeinterface #127,  3          // InterfaceMethod clojure/lang/IFn.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
</span><span class='line'>     140: invokestatic  #130                // Method clojure/lang/Numbers.add:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Number;
</span><span class='line'>     143: goto          148
</span><span class='line'>     146: pop
</span><span class='line'>     147: aconst_null
</span><span class='line'>     148: areturn
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Holy stromboli! Looks like Clojure generates a lot more bytecode.</p>

<p> There&rsquo;s nothing exciting going on in either the Java or Scala bytecode, both make two calls to countChange, they use slightly different instructions when doing the comparisons in the if-else, but that is the most noticeable difference. I thought that maybe the Scala compiler had done something neat to optimize the recursive call, but that seems not to be the case. Scala can optimize for tail-recursive calls by converting them to loops (goto statement at the end of the instruction sequence which jumps to offset 0), but not for this type of algorithm. I am left wondering what magic is taking place to account for the vast difference in performance.</p>

<p>Some thoughts:</p>

<ul>
<li>I could have used an array in Java instead of an ArrayList in the first example, but I did not feel like this would be the way most developers would approach the problem.</li>
<li>Clojure is a dynamic language (which explains the slowness) and I did not provide type hints because, again, that is not &ldquo;idiomatic Clojure.&rdquo;</li>
<li>Clojure is &lsquo;slow&rsquo;, but the syntax woos me, so I will probably learn it anyways.</li>
<li>All of these languages run on the same ol&#8217; JVM, so one can think of this as comparing &ldquo;effort it takes to write the code&rdquo; vs. how performant it is.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursion in Scala]]></title>
    <link href="http://rxacevedo.github.io/blog/2013/04/08/recursion-in-scala/"/>
    <updated>2013-04-08T19:33:00-04:00</updated>
    <id>http://rxacevedo.github.io/blog/2013/04/08/recursion-in-scala</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been going through Martin Odersky&rsquo;s free course on Coursera, <a href="https://www.coursera.org/course/progfun">Functional
Programming Principles in Scala</a>, and
I must say that it&rsquo;s prompted me to think in ways that I&rsquo;ve never had to before.
The course starts off teaching by teaching you how basic logic and arithmetic
operators work in Scala, but then quickly dives into recursive functions and
how to use them. In order to help me develop a more concrete
understanding of the concept, and to help anyone else that may be
struggling with it themselves, I&rsquo;ve decided to write this blog post to share
what I have learned so far.</p>

<p>Recursive functions are functions that call themselves. This post will focus on
what is called tail-recursion, altough there are also head-recursive functions.
Basically (as far as I understand it), tail-recursion is when a function <em>does
stuff</em> and then calls itself as the last step of it&rsquo;s defintion. Head
recursion, on the other hand, is when a function calls itself at the beginning
of its defition, saving that iterations state when the call is made, then
executing any other instructions when the recursive call returns (this would
then happen for each recursive call). A better explanation can be found
<a href="http://www.cs.cmu.edu/~adamchik/15-121/lectures/Recursions/recursions.html">here</a>.</p>

<p>Consider the following function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">sum</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="k">if</span><span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="o">)</span> <span class="n">a</span> <span class="k">else</span> <span class="n">a</span> <span class="o">+</span> <span class="n">sum</span><span class="o">(</span><span class="n">a</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the last thing that this function does is call itself. This is a
recursive function in the sense that it is calling itself. As the name
implies, this function will return the sum of parameters a and b. Since the
execution of this wasn&rsquo;t initially evident to me, let&rsquo;s trace it out:</p>

<pre><code>Call 1: a = 1, b = 5 =&gt; sum(1, 5) =&gt; (a == b) ? false =&gt; 1 + sum(1 + 1, 5) 
Call 2: a = 2, b = 5 =&gt; sum(2, 5) =&gt; (a == b) ? false =&gt; 2 + sum(2 + 1, 5) 
Call 3: a = 1, b = 5 =&gt; sum(3, 5) =&gt; (a == b) ? false =&gt; 3 + sum(3 + 1, 5) 
Call 4: a = 1, b = 5 =&gt; sum(4, 5) =&gt; (a == b) ? false =&gt; 4 + sum(4 + 1, 5) 
Call 5: a = 1, b = 5 =&gt; sum(5, 5) =&gt; (a == b) ? true =&gt; 5 
</code></pre>

<p>The evaluation of a and b&rsquo;s equality is the exit condition, or <strong>base
case</strong>. This is necessary with recursive functions, or else execution will go
on forever. Try omitting that and see what happens if you&rsquo;d like (it&rsquo;ll blow up
in your face). We can see that at the fifth call, our exit condition
evaluates to true, so we return a itself, which is in this case 5. Where do we
return it? To the previous call. Let&rsquo;s further simplify:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">sum</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">5</span><span class="o">)</span>
</span><span class='line'><span class="mi">1</span> <span class="o">+</span> <span class="n">sum</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span>
</span><span class='line'><span class="mi">1</span> <span class="o">+</span> <span class="o">(</span><span class="mi">2</span> <span class="o">+</span> <span class="n">sum</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">))</span>
</span><span class='line'><span class="mi">1</span> <span class="o">+</span> <span class="o">(</span><span class="mi">2</span> <span class="o">+</span> <span class="o">(</span><span class="mi">3</span> <span class="o">+</span> <span class="n">sum</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">)))</span>
</span><span class='line'><span class="mi">1</span> <span class="o">+</span> <span class="o">(</span><span class="mi">2</span> <span class="o">+</span> <span class="o">(</span><span class="mi">3</span> <span class="o">+</span> <span class="o">(</span><span class="mi">4</span> <span class="o">+</span> <span class="n">sum</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">))))</span>
</span><span class='line'><span class="mi">1</span> <span class="o">+</span> <span class="o">(</span><span class="mi">2</span> <span class="o">+</span> <span class="o">(</span><span class="mi">3</span> <span class="o">+</span> <span class="o">(</span><span class="mi">4</span> <span class="o">+</span> <span class="o">(</span><span class="mi">5</span><span class="o">))))</span> <span class="o">==</span> <span class="mi">15</span> <span class="c1">// True statement</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now we have computed the sum of the numbers between 1 through 5. What if we
wanted to compute the product of these numbers? The key here is that our
function drills down until it reaches the termination condition, then it
&ldquo;shoots back up&rdquo; and does an operation on the returned value for each call.
Because we are already returning 5, 4 + (return), 3 + (return), 2 + (return),
and 1 + (return), we already have the basic layout that we want. We want to get
to here: 5, 4 * (return), 3 * (return), 2 * (return), 1 * (return). This is
already starting to look like a factorial function, but we&rsquo;re not quite there
yet. Let&rsquo;s redefine our function to calculate the <strong>product</strong> of the integers
in range (a, b):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">product</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="k">if</span><span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="o">)</span> <span class="n">a</span> <span class="k">else</span> <span class="n">a</span> <span class="o">*</span> <span class="n">product</span><span class="o">(</span><span class="n">a</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The same thing will happen, only when we reach our termination condition, we
will multiply that by our current <em>a</em> value instead of adding it. Let&rsquo;s test that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">product</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span>
</span><span class='line'><span class="n">res21</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">120</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now we have the product, and we only had to change the operator that we
used. Since we are so close, let&rsquo;s go ahead implement a factorial function. We want our
factorial function to take one argument instead of two, we&rsquo;ll call it x:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">factorial</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">???</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some caveats here, we want to give the function our maxiumum argument, and
calculate recursively going <strong>down</strong>. We&rsquo;ll have to tweak the function a little
bit to do that. We know that:</p>

<ul>
<li>We have to decrement our argument for each recursive call</li>
<li>We&rsquo;ll want to terminate at some point</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">factorial</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="k">if</span><span class="o">(???)</span> <span class="o">???</span> <span class="k">else</span> <span class="n">x</span> <span class="o">*</span> <span class="n">factorial</span><span class="o">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We want to multiply our inital value by what is returned by the recursive call,
that call being on the current argument decremented by 1. When should we
terminate though, and what should we return? I have a habit of checking if a
value is 0, and one <em>could</em> return 1 when this is met , but that would give us
an extra one, 5 * 4 * 3 * 2 * 1 * 1, which is an innocuous value to multiply
by, but increases the depth of our call stack nonetheless. In this case it&rsquo;s not
necessary, since 5 * 4 * 3 * 2 * 1 will give us our answer. We should check
when we have reached 1 (and that our input is not negative), and return 1 (to multiply by) in that case. Our new
definition looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">factorial</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="k">if</span><span class="o">(</span><span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="o">)</span> <span class="mi">1</span> <span class="k">else</span> <span class="n">x</span> <span class="o">*</span> <span class="n">factorial</span><span class="o">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s run that puppy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">factorial</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span>
</span><span class='line'><span class="n">res22</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">120</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we get what we expected.</p>

<p>Now, this <em>looks</em> very elegant, doesn&rsquo;t it? Well, we can further simplify.
If you look back up at the execution of the method, you&rsquo;ll see that we have to
remember the value of every single iteration, all the way up the
chain. Our expression grows with each execution, not so much for the sum of 15,
but you can imagine how quickly it would grow for factorial(200) (well, that returns
infinity using type Double). What we need is a function that doesn&rsquo;t depend on
all previous iterations, one that is given every value that it needs to compute
the value for that iteration, instead of having to run all the way up the
heirarchy, doing a sum (or multiplication) for each call (within the arguments).
We can do this by defining an inner function and supplying it with a seed value.
Lets start with our sum function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">sum</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">inner</span><span class="o">(</span><span class="n">acc</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">a</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span><span class="o">)</span> <span class="n">acc</span> <span class="k">else</span> <span class="n">inner</span><span class="o">(</span><span class="n">acc</span> <span class="o">+</span> <span class="n">a</span><span class="o">,</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span>
</span><span class='line'>    <span class="n">inner</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this implementation, we define an inner function that takes three arguments:
our two previous arguments, and an accumulator. Accumulator is your friend,
because by passing him into the function each time, we avoid having to keep
track of what&rsquo;s going on in the call hierarchy above us, we have everything we
need because accumulator is storing a running total. Also notice that our
function does not have to do any calculations upon returning, unlike the
previous implementation that needed to add a to the return value. This function
is <strong>tail recursive</strong>. We can take advantage of the accumulator and use the
same approach with our product and factorial functions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">product</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">inner</span><span class="o">(</span><span class="n">acc</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">a</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span><span class="o">)</span> <span class="n">acc</span> <span class="k">else</span> <span class="n">inner</span><span class="o">(</span><span class="n">acc</span> <span class="o">*</span> <span class="n">a</span><span class="o">,</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span>
</span><span class='line'>    <span class="n">inner</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that we seed 1 to this function instead of 0 since we don&rsquo;t want to
multiply by zero.</p>

<p>Factorial is just as easy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">factorial</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">inner</span><span class="o">(</span><span class="n">acc</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">a</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">acc</span> <span class="k">else</span> <span class="n">inner</span><span class="o">(</span><span class="n">acc</span> <span class="o">*</span> <span class="n">a</span><span class="o">,</span> <span class="n">a</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>    <span class="n">inner</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">a</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>By doing this, we can reuse the same stack frame for each call. This is in
contrast to our previous approaches, which required that we push onto the stack
for each consecutive calculation and call, then pop each return off the
stack in order to arrive at our final value. The first approach is a <strong>recursive process</strong>, whereas the second is called an <strong>iterative process.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multi-threaded Socket Server]]></title>
    <link href="http://rxacevedo.github.io/blog/2012/12/03/socket-server/"/>
    <updated>2012-12-03T11:34:00-05:00</updated>
    <id>http://rxacevedo.github.io/blog/2012/12/03/socket-server</id>
    <content type="html"><![CDATA[<p>This a multi-threaded socket server/client system I put together for school using POSIX threads &ndash; it was also my C primer. I&rsquo;m sure that there are much more efficient ways of doing this, but I figured I&rsquo;d post it for anyone looking for an example to work off of (I make no guarantees regarding this code, I have much more to learn about multi-threading and C in general).</p>

<p>In the screenshot below, you can see 16 threads in queue while the main thread continues to handle requests, spawning new threads to serve each one (they exit too quickly to be seen in htop/the screenshot). I tested the server with some help from <a href="http://terite.com">my friend David</a>, who wrote a quick test case in Node to send a connection request every 5ms, writing the string &ldquo;data&rdquo; to the socket upon success.</p>

<p><img src="http://rxacevedo.github.io/images/posts/server_htop.png" alt="Multiple threads shown in htop" /></p>

<h3>Server program</h3>

<figure class='code'><figcaption><span> (server.c)</span> <a href='http://rxacevedo.github.io/downloads/code/server/server.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * Roberto Acevedo</span>
</span><span class='line'><span class="cm"> * Multi-threaded socket server</span>
</span><span class='line'><span class="cm"> * COP4610</span>
</span><span class='line'><span class="cm"> * server.c</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netdb.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netinet/in.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;pthread.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Preprocessor Directives */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define NTHREADS 50</span>
</span><span class='line'><span class="cp">#define QUEUE_SIZE 5</span>
</span><span class='line'><span class="cp">#define BUFFER_SIZE 256</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Global counter locked via mutex */</span>
</span><span class='line'>
</span><span class='line'><span class="n">pthread_t</span> <span class="n">threadid</span><span class="p">[</span><span class="n">NTHREADS</span><span class="p">];</span> <span class="c1">// Thread pool</span>
</span><span class='line'><span class="n">pthread_mutex_t</span> <span class="n">lock</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="nf">threadworker</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">sockfd</span><span class="p">,</span> <span class="n">rw</span><span class="p">;</span> <span class="c1">// File descriptor and &#39;read/write&#39; to socket indicator</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">buffer</span><span class="p">;</span> <span class="c1">// Message buffer</span>
</span><span class='line'>  <span class="n">sockfd</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">arg</span><span class="p">;</span> <span class="c1">// Getting sockfd from void arg passed in</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">buffer</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">BUFFER_SIZE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">bzero</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">BUFFER_SIZE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">rw</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">BUFFER_SIZE</span><span class="p">);</span> <span class="c1">// Blocks until there is something to be read in the socket</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">rw</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Error reading form socket, exiting thread&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pthread_exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;New message received: %s&quot;</span><span class="p">,</span> <span class="n">buffer</span><span class="p">);</span> <span class="c1">// String already has newline</span>
</span><span class='line'>  <span class="n">bzero</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">BUFFER_SIZE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sprintf</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="s">&quot;Acknowledgement from TID:0x%x&quot;</span><span class="p">,</span> <span class="n">pthread_self</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">rw</span> <span class="o">=</span> <span class="n">write</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buffer</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">rw</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Error writing to socket, exiting thread&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pthread_exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Critical section */</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Requesting mutex lock...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">pthread_mutex_lock</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Current counter value: %d, upping by 1...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">counter</span><span class="p">);</span>
</span><span class='line'>  <span class="n">counter</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="n">pthread_mutex_unlock</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Done! Mutex unlocked again, new counter value: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">counter</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">close</span><span class="p">(</span><span class="n">sockfd</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;TID:0x%x served request, exiting thread</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">pthread_self</span><span class="p">());</span>
</span><span class='line'>  <span class="n">pthread_exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Variable declarations */</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">serv_sockfd</span><span class="p">,</span> <span class="n">new_sockfd</span><span class="p">;</span> <span class="c1">//Socket identifiers for server and incoming clients</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">addrinfo</span> <span class="n">flags</span><span class="p">;</span> <span class="c1">// Params used to establish listening socket</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">addrinfo</span> <span class="o">*</span><span class="n">host_info</span><span class="p">;</span> <span class="c1">// Resultset for localhost address info, set by getaddrinfo()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">socklen_t</span> <span class="n">addr_size</span><span class="p">;</span> <span class="c1">// Client address size since we use sockaddr_storage struct to store</span>
</span><span class='line'>                       <span class="c1">// client info coming in, not using addrinfo as done for host (local) </span>
</span><span class='line'>                       <span class="c1">// by calling getaddrinfo for resolution, which stores results in </span>
</span><span class='line'>                       <span class="c1">// the more convenient addrinfo struct</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sockaddr_storage</span> <span class="n">client</span><span class="p">;</span> <span class="c1">// Sockaddr storage struct is larger than sockaddr_in, </span>
</span><span class='line'>                                  <span class="c1">// can be used both for IPv4 and IPv6</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pthread_attr_t</span> <span class="n">attr</span><span class="p">;</span> <span class="c1">// Thread attribute</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span> <span class="c1">// Thread iterator</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Start of main program */</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span><span class="s">&quot;Error: no port provided</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">flags</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">flags</span><span class="p">));</span>
</span><span class='line'>  <span class="n">flags</span><span class="p">.</span><span class="n">ai_family</span> <span class="o">=</span> <span class="n">AF_UNSPEC</span><span class="p">;</span> <span class="c1">// Use IPv4 or IPv6, whichever</span>
</span><span class='line'>  <span class="n">flags</span><span class="p">.</span><span class="n">ai_socktype</span> <span class="o">=</span> <span class="n">SOCK_STREAM</span><span class="p">;</span> <span class="c1">// TCP</span>
</span><span class='line'>  <span class="n">flags</span><span class="p">.</span><span class="n">ai_flags</span> <span class="o">=</span> <span class="n">AI_PASSIVE</span><span class="p">;</span> <span class="c1">// Set address for me </span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">getaddrinfo</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">flags</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">host_info</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Couldn&#39;t read host info for socket start&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">serv_sockfd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">host_info</span><span class="o">-&gt;</span><span class="n">ai_family</span><span class="p">,</span> <span class="n">host_info</span><span class="o">-&gt;</span><span class="n">ai_socktype</span><span class="p">,</span> <span class="n">host_info</span><span class="o">-&gt;</span><span class="n">ai_protocol</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">serv_sockfd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Error opening socket&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">bind</span><span class="p">(</span><span class="n">serv_sockfd</span><span class="p">,</span> <span class="n">host_info</span><span class="o">-&gt;</span><span class="n">ai_addr</span><span class="p">,</span> <span class="n">host_info</span><span class="o">-&gt;</span><span class="n">ai_addrlen</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Error on binding&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">freeaddrinfo</span><span class="p">(</span><span class="n">host_info</span><span class="p">);</span> <span class="c1">// Don&#39;t need this struct anymore</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pthread_attr_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">attr</span><span class="p">);</span> <span class="c1">// Creating thread attributes</span>
</span><span class='line'>  <span class="n">pthread_attr_setschedpolicy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">attr</span><span class="p">,</span> <span class="n">SCHED_FIFO</span><span class="p">);</span> <span class="c1">// FIFO scheduling for threads </span>
</span><span class='line'>  <span class="n">pthread_attr_setdetachstate</span><span class="p">(</span><span class="o">&amp;</span><span class="n">attr</span><span class="p">,</span> <span class="n">PTHREAD_CREATE_DETACHED</span><span class="p">);</span> <span class="c1">// Don&#39;t want threads (particualrly main)</span>
</span><span class='line'>                                                               <span class="c1">// waiting on each other</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">listen</span><span class="p">(</span><span class="n">serv_sockfd</span><span class="p">,</span> <span class="n">QUEUE_SIZE</span><span class="p">);</span> <span class="c1">// Pass in socket file descriptor and the size of the backlog queue </span>
</span><span class='line'>                                   <span class="c1">// (how many pending connections can be in queue while another request</span>
</span><span class='line'>                                   <span class="c1">// is handled)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">addr_size</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">client</span><span class="p">);</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">NTHREADS</span><span class="p">)</span> <span class="c1">// So that we don&#39;t access a thread out of bounds of the thread pool</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">new_sockfd</span> <span class="o">=</span> <span class="n">accept</span><span class="p">(</span><span class="n">serv_sockfd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">client</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">addr_size</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">new_sockfd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Error on accept&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">threadid</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">attr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">threadworker</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">new_sockfd</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sleep</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// Giving threads some CPU time</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Client program</h3>

<figure class='code'><figcaption><span> (client.c)</span> <a href='http://rxacevedo.github.io/downloads/code/server/client.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Roberto Acevedo</span>
</span><span class='line'><span class="cm"> * Multi-threaded socket server project</span>
</span><span class='line'><span class="cm"> * COP4610</span>
</span><span class='line'><span class="cm"> * client.c</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netdb.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netinet/in.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;pthread.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define BUFFER_SIZE 256 </span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">sockfd</span><span class="p">,</span> <span class="n">rw</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">addrinfo</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">addrinfo</span> <span class="o">*</span><span class="n">server_info</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">buffer</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">BUFFER_SIZE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Usage: ./client &lt;hostname/address&gt; &lt;port&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">flags</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">flags</span><span class="p">));</span> <span class="c1">// Clear so we&#39;re not working with garbage</span>
</span><span class='line'>  <span class="n">flags</span><span class="p">.</span><span class="n">ai_family</span> <span class="o">=</span> <span class="n">AF_UNSPEC</span><span class="p">;</span> <span class="c1">// IPv4 or IPv6 doesn&#39;t matter</span>
</span><span class='line'>  <span class="n">flags</span><span class="p">.</span><span class="n">ai_socktype</span> <span class="o">=</span> <span class="n">SOCK_STREAM</span><span class="p">;</span> <span class="c1">// TCP</span>
</span><span class='line'>  <span class="n">flags</span><span class="p">.</span><span class="n">ai_flags</span> <span class="o">=</span> <span class="n">AI_PASSIVE</span><span class="p">;</span> <span class="c1">// get the IP for me</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">getaddrinfo</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">flags</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">server_info</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Resolve host based on CMD args</span>
</span><span class='line'>    <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Couldn&#39;t find host&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sockfd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">server_info</span><span class="o">-&gt;</span><span class="n">ai_family</span><span class="p">,</span> <span class="n">server_info</span><span class="o">-&gt;</span><span class="n">ai_socktype</span><span class="p">,</span> <span class="n">server_info</span><span class="o">-&gt;</span><span class="n">ai_protocol</span><span class="p">);</span> <span class="c1">// Initialize socket</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">connect</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="n">server_info</span><span class="o">-&gt;</span><span class="n">ai_addr</span><span class="p">,</span> <span class="n">server_info</span><span class="o">-&gt;</span><span class="n">ai_addrlen</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Couldn&#39;t conenct...&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Connection established, please enter a message:</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">bzero</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">BUFFER_SIZE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fgets</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">BUFFER_SIZE</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">rw</span> <span class="o">=</span> <span class="n">write</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buffer</span><span class="p">));</span> <span class="c1">// Sending the contents of the buffer - writes using socket file descriptor</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">rw</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Failed to send message&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">bzero</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">BUFFER_SIZE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">rw</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">BUFFER_SIZE</span><span class="p">);</span> <span class="c1">// Read the ENTIRE buffer because we don&#39;t know stlen yet </span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">rw</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Error reading from socket&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;The message is: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">buffer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">close</span><span class="p">(</span><span class="n">sockfd</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Node test</h3>

<figure class='code'><figcaption><span> (stress.js)</span> <a href='http://rxacevedo.github.io/downloads/code/server/stress.js'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">net</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;net&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">open</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">socket</span> <span class="o">=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">connect</span><span class="p">({</span>
</span><span class='line'>   <span class="c1">// Substitute IP/port of machine you run server on</span>
</span><span class='line'>   <span class="c1">// Note: EOENT means the FS is no longer allowing node to connect,</span>
</span><span class='line'>   <span class="c1">// re-run the script and the server will resume handling requests</span>
</span><span class='line'>   <span class="nx">host</span><span class="o">:</span> <span class="s1">&#39;10.0.1.20&#39;</span><span class="p">,</span>
</span><span class='line'>   <span class="nx">port</span><span class="o">:</span> <span class="mi">8080</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;connect&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">open</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">showOpen</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">socket</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;data\n&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">open</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">showOpen</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">},</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">showOpen</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">process</span><span class="p">.</span><span class="nx">stdout</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;\u001B[2J\u001B[0;0f&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Open&quot;</span><span class="p">,</span> <span class="nx">open</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
