<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: algorithms | Roberto Acevedo]]></title>
  <link href="http://rxacevedo.github.io/blog/categories/algorithms/atom.xml" rel="self"/>
  <link href="http://rxacevedo.github.io/"/>
  <updated>2014-05-03T23:43:12-04:00</updated>
  <id>http://rxacevedo.github.io/</id>
  <author>
    <name><![CDATA[Roberto Acevedo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deque]]></title>
    <link href="http://rxacevedo.github.io/blog/2014/05/03/deque/"/>
    <updated>2014-05-03T12:30:23-04:00</updated>
    <id>http://rxacevedo.github.io/blog/2014/05/03/deque</id>
    <content type="html"><![CDATA[<p>Since a Deque is really just a two-way Stack, I figured I may as
well post one as well. RE: <a href="/blog/2014/05/03/stack/">my previous post</a>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (Deque.java)</span> <a href='/downloads/code/java/Deque.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.NoSuchElementException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by roberto on 5/3/14.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Deque</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span><span class="o">;</span> <span class="c1">// size of deque</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Node</span> <span class="n">first</span><span class="o">;</span> <span class="c1">// track head</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Node</span> <span class="n">last</span><span class="o">;</span> <span class="c1">// track tail</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Inner class for Node objects */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">Node</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">T</span> <span class="n">item</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">Node</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">Node</span> <span class="n">prev</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Inner class for Iterator */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">DequeIterator</span> <span class="kd">implements</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">Node</span> <span class="n">current</span> <span class="o">=</span> <span class="n">first</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasNext</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">current</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">T</span> <span class="nf">next</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">hasNext</span><span class="o">())</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NoSuchElementException</span><span class="o">(</span><span class="s">&quot;No more items to return.&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">T</span> <span class="n">item</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">item</span><span class="o">;</span>
</span><span class='line'>            <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">item</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">(</span><span class="s">&quot;This iterator cannot be used to modify the Deque.&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Construct an empty deque</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Deque</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">size</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Checks if the deque is empty or not</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return boolean indicating whether empty or not</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isEmpty</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">first</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">last</span> <span class="o">==</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Return the number of items on the deque</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return size</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">size</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Insert the item at the beginning</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param item T to be added to the head of the stack</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addFirst</span><span class="o">(</span><span class="n">T</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">item</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">(</span><span class="s">&quot;This Deque does not accept nulls.&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Node</span> <span class="n">oldFirst</span> <span class="o">=</span> <span class="n">first</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Node</span> <span class="n">newFirst</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">();</span>
</span><span class='line'>        <span class="n">newFirst</span><span class="o">.</span><span class="na">item</span> <span class="o">=</span> <span class="n">item</span><span class="o">;</span>
</span><span class='line'>        <span class="n">newFirst</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">oldFirst</span><span class="o">;</span>
</span><span class='line'>        <span class="n">first</span> <span class="o">=</span> <span class="n">newFirst</span><span class="o">;</span>
</span><span class='line'>        <span class="cm">/* Enforce invariants */</span>
</span><span class='line'>        <span class="n">last</span> <span class="o">=</span> <span class="o">++</span><span class="n">size</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="n">first</span> <span class="o">:</span> <span class="n">last</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">oldFirst</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="n">oldFirst</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">newFirst</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Insert the item at the end</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param item T to be added to the tail of the stack</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addLast</span><span class="o">(</span><span class="n">T</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">item</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">(</span><span class="s">&quot;This Deque does not accept nulls.&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Node</span> <span class="n">oldLast</span> <span class="o">=</span> <span class="n">last</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Node</span> <span class="n">newLast</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">();</span>
</span><span class='line'>        <span class="n">newLast</span><span class="o">.</span><span class="na">item</span> <span class="o">=</span> <span class="n">item</span><span class="o">;</span>
</span><span class='line'>        <span class="n">newLast</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">oldLast</span><span class="o">;</span>
</span><span class='line'>        <span class="n">last</span> <span class="o">=</span> <span class="n">newLast</span><span class="o">;</span>
</span><span class='line'>        <span class="cm">/* Enforce invariants */</span>
</span><span class='line'>        <span class="n">first</span> <span class="o">=</span> <span class="o">++</span><span class="n">size</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="n">last</span> <span class="o">:</span> <span class="n">first</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">oldLast</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="n">oldLast</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">newLast</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Delete and return the item at the front</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return item at the front</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">T</span> <span class="nf">removeFirst</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isEmpty</span><span class="o">())</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">NoSuchElementException</span><span class="o">(</span><span class="s">&quot;The Deque is empty.&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">T</span> <span class="n">item</span> <span class="o">=</span> <span class="n">first</span><span class="o">.</span><span class="na">item</span><span class="o">;</span>
</span><span class='line'>        <span class="n">first</span> <span class="o">=</span> <span class="n">first</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>        <span class="cm">/* Enforce invariants */</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(--</span><span class="n">size</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>            <span class="n">first</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">size</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>            <span class="n">last</span> <span class="o">=</span> <span class="n">first</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">item</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Delete and return the item at the end</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return item at the end</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">T</span> <span class="nf">removeLast</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isEmpty</span><span class="o">())</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">NoSuchElementException</span><span class="o">(</span><span class="s">&quot;The Deque is empty.&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">T</span> <span class="n">item</span> <span class="o">=</span> <span class="n">last</span><span class="o">.</span><span class="na">item</span><span class="o">;</span>
</span><span class='line'>        <span class="n">last</span> <span class="o">=</span> <span class="n">last</span><span class="o">.</span><span class="na">prev</span><span class="o">;</span>
</span><span class='line'>        <span class="cm">/* Enforce invariants */</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(--</span><span class="n">size</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>            <span class="n">last</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">size</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>            <span class="n">first</span> <span class="o">=</span> <span class="n">last</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">item</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Return an iterator over items in order from front to end</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return a new {@link Deque.DequeIterator}</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">iterator</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">DequeIterator</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Main</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param args CLI args</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Deque</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">stringDeque</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Deque</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="n">stringDeque</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="s">&quot;First String&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">stringDeque</span><span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="s">&quot;Last String&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">stringDeque</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="s">&quot;Push First back one&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">stringDeque</span><span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="s">&quot;Push Last back one&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">stringDeque</span><span class="o">.</span><span class="na">removeLast</span><span class="o">();</span>
</span><span class='line'>        <span class="n">stringDeque</span><span class="o">.</span><span class="na">removeFirst</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">stringDeque</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stack]]></title>
    <link href="http://rxacevedo.github.io/blog/2014/05/03/stack/"/>
    <updated>2014-05-03T12:03:03-04:00</updated>
    <id>http://rxacevedo.github.io/blog/2014/05/03/stack</id>
    <content type="html"><![CDATA[<p>From time to time, I like to try my hand at writing common data strucutures,
sorting algorithms, etc, just to prove to myself that I can do it. I&rsquo;m going to
start posting these on here as I go along, in case they&rsquo;re of use to anyone
else. I&rsquo;ll start with a really simple one &ndash; the Stack. If you spot something that&rsquo;s
incorrect, please leave a comment.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (Stack.java)</span> <a href='/downloads/code/java/Stack.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.NoSuchElementException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by roberto on 5/3/14.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Private {@link Stack.Node} class for linked list backing structure</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">Node</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">T</span> <span class="n">item</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">Node</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Private {@link Iterator} to support {@link java.lang.Iterable}</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">StackIterator</span> <span class="kd">implements</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">Node</span> <span class="n">current</span> <span class="o">=</span> <span class="n">first</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasNext</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">current</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">()</span> <span class="o">{</span> <span class="cm">/* Nope */</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">T</span> <span class="nf">next</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">T</span> <span class="n">t</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">item</span><span class="o">;</span>
</span><span class='line'>            <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">t</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Head of the linked list */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Node</span> <span class="n">first</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Returns an iterator over a set of elements of type T.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return an {@link java.util.Iterator} to support {@link java.lang.Iterable}.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">iterator</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">StackIterator</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Returns the item most recently pushed onto the stack.</span>
</span><span class='line'><span class="cm">     * Throws {@link java.util.NoSuchElementException} if the head is null.</span>
</span><span class='line'><span class="cm">     * Takes constant time O(1).</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return The head of the list.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">T</span> <span class="nf">pop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">first</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">NoSuchElementException</span><span class="o">(</span><span class="s">&quot;Stack is empty.&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">T</span> <span class="n">item</span> <span class="o">=</span> <span class="n">first</span><span class="o">.</span><span class="na">item</span><span class="o">;</span>
</span><span class='line'>        <span class="n">first</span> <span class="o">=</span> <span class="n">first</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">item</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Pushes an item onto the stack. Takes constant time O(1);</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param item</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span><span class="n">T</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Node</span> <span class="n">oldFirst</span> <span class="o">=</span> <span class="n">first</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Node</span> <span class="n">node</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">();</span>
</span><span class='line'>        <span class="n">node</span><span class="o">.</span><span class="na">item</span> <span class="o">=</span> <span class="n">item</span><span class="o">;</span>
</span><span class='line'>        <span class="n">node</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">oldFirst</span><span class="o">;</span>
</span><span class='line'>        <span class="n">first</span> <span class="o">=</span> <span class="n">node</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Stack</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">stringStack</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="n">stringStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="s">&quot;Hey we made a stack!&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">stringStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="s">&quot;Here&#39;s string 2!&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">stringStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="s">&quot;And 3.&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">stringStack</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">stringStack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Predicting Algorithm Running Times]]></title>
    <link href="http://rxacevedo.github.io/blog/2014/01/26/predicting-algorithm-running-times/"/>
    <updated>2014-01-26T19:47:29-05:00</updated>
    <id>http://rxacevedo.github.io/blog/2014/01/26/predicting-algorithm-running-times</id>
    <content type="html"><![CDATA[<p>In the first week of the <a href="https://www.coursera.org/course/algs4partI">Algorithms I</a>
course on <a href="https://www.coursera.org/">Coursera</a>, we are walked through the process
of doing some mathematical analysis on an algorithm to arrive at an equation that
allows the prediction of the running time over a larger data set. This seems like
an incredibly valuable skill to me, so I wanted to walk through the example myself
so that I could fully understand the process. I started by figuring out how to
spawn system processes from within Clojure:</p>

<p>``` clojure
;; Using Java:
;;
(&ndash;> (ProcessBuilder. [&ldquo;java&rdquo; &ldquo;-cp&rdquo; &ldquo;.:stdlib.jar&rdquo; &ldquo;ThreeSum&rdquo;</p>

<pre><code>                  "http://algs4.cs.princeton.edu/14analysis/1Kints.txt"])
(.directory (java.io.File. "/Users/Roberto/git/working/algorithms_1/ThreeSum/"))
(.start)
(.getInputStream)
slurp)
</code></pre>

<p>;; More simply, using Clojure constructs:
;;
(let [p (sh &ldquo;java&rdquo; &ldquo;-cp&rdquo; &ldquo;.:stdlib.jar&rdquo; &ldquo;ThreeSum&rdquo;</p>

<pre><code>        "http://algs4.cs.princeton.edu/14analysis/1Kints.txt"
        :dir "/Users/Roberto/git/working/algorithms_1/ThreeSum/")]
</code></pre>

<p>  (:out p))</p>

<p>```</p>

<p>With that out of the way, all that&rsquo;s left is parse the numbers from
the output and run the same procedure over a variety of inputs. Once
we&rsquo;ve acquired the data, we can tabulate and/or plot it in Incanter:</p>

<p>Using this command, we can get a lazy sequence of vectors, each
containing the filename and the amount of time it took for the process
to run:</p>

<p>```  clojure
(for [f [&ldquo;1Kints.txt&rdquo;</p>

<pre><code>     "2Kints.txt"
     "4Kints.txt"]
  :let [t (-&gt;&gt; (:out (sh "java" "-cp"
                         ".:stdlib.jar"
                         "ThreeSum"
                         (str "http://algs4.cs.princeton.edu/14analysis/" f)
                         :dir "/Users/Roberto/git/working/algorithms_1/ThreeSum/"))
               (re-find #"\d+.\d+")
               Double/parseDouble)]]
</code></pre>

<p>  [f t])
;; ([&ldquo;1Kints.txt&rdquo; 0.294] [&ldquo;2Kints.txt&rdquo; 2.357] [&ldquo;4Kints.txt&rdquo; 18.424])
```</p>

<p>Now that we have the data, we can create an Incanter dataset from it
that can be used for plotting purposes.</p>

<p><code>clojure
(to-dataset
 [[1000 0.294]
  [2000 2.357]
  [4000 18.424]])
;; | :col-0 | :col-1 |
;; |--------+--------|
;; |   1000 |  0.294 |
;; |   2000 |  2.357 |
;; |   4000 | 18.424 |
</code></p>

<p>If we draw a log-log plot, we get a straight line, here are the
log-log data points (log base 2):</p>

<p>``` clojure
(with-data (to-dataset (log2 (to-matrix (to-dataset</p>

<pre><code>                                     [[1000 0.294]
                                      [2000 2.357]
                                      [4000 18.424]]))))
</code></pre>

<p>  $data)
;; |             :col-0 |              :col-1 |
;; |&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;|
;; |  9.965784284662087 | -1.7661119398257226 |
;; | 10.965784284662087 |  1.2369517585880805 |
;; | 11.965784284662087 |   4.203514411130758 |
```</p>

<p>Now we set up our equation as follows:</p>

<pre><code>T(n) = ?

Since applying log/log yields a straight line, we can apply the
power law. The power law states that:

y = a (x^k) (we omit the deviation term in this example)

This can be rewritten as:

T(n) = a(n ^ b)

and after taking the lg of both sides, can be expressed as:

lg(T(n)) = b lg(n) + c

This looks a lot like the slope-intercept form of a line, does it
not? If we set up out equation as:

y = mx + b
</code></pre>

<p>The slope of the line (b in our original equation) is:</p>

<p><code>clojure
(/ (- 4.203514411130758 1.2369517585880805)
   (- 11.965784284662087 10.965784284662087))
;; 2.9665626525426774
</code>
So now we can write:</p>

<pre><code>lg(T(n) = 2.97 lg(n) + c
</code></pre>

<p>We can plug in some data points to solve for c:</p>

<pre><code>4.203514411130758 = 2.97 (11.965784284662087) + c
</code></pre>

<p><code>clojure
(- 4.203514411130758 (* 2.97 11.965784284662087))
;; -31.33486491431564
</code></p>

<p>So b = 2.97, c = -31.33</p>

<p>The final equation is then:</p>

<pre><code>lg(T(n)) = 2.97 lg(n) - 31.33
</code></pre>

<p>We now want to get back to the form T(n) = a(n ^ b). We can use two
rules of logarithms to do that:</p>

<pre><code>1. a^(b + c) = (a^b)(a^c)
2. a^(b * c) = (a^b)^c == (a^c)^b
</code></pre>

<p>We can raise 2 to the power of each side:</p>

<pre><code>2^lg(T(n)) = 2^(2.97 lg(n) - 31.33)
</code></pre>

<p>Using rule 1:</p>

<pre><code>T(n) = 2^(2.97 lg(n)) * 2^-31.33
</code></pre>

<p>And using rule 2:</p>

<pre><code>T(n) = (2^(lg(n)))^2.97 * 2^-31.33
    = n^2.97 * 2^-31.33
    = 3.705E-10 * n^2.97
</code></pre>

<p>Finally:</p>

<pre><code>T(n) = 3.7045054312558825E-10 (n ^ 2.97)
</code></pre>

<p>With this, we should be able to plug in 8000 and get an approximation
of the running time:</p>

<pre><code>T(8000) = 3.7045054312558825E-10 (8000 ^ 2.97)
</code></pre>

<p>``` clojure
(* 3.7045054312558825E-10 (pow 8000 2.97))
;; 144.84633044665534 (seconds)</p>

<p>```
And when we run it to test our theory:</p>

<p>``` clojure
(for [f [&ldquo;8Kints.txt&rdquo;]</p>

<pre><code>  :let [t (-&gt;&gt; (:out (sh "java" "-cp"
                         ".:stdlib.jar"
                         "ThreeSum"
                         (str "http://algs4.cs.princeton.edu/14analysis/" f)
                         :dir "/Users/Roberto/git/working/algorithms_1/ThreeSum/"))
               (re-find #"\d+.\d+")
               Double/parseDouble)]]
</code></pre>

<p>  [f t])
;; ([&ldquo;8Kints.txt&rdquo; 147.342])
```</p>

<p>We get what approximately what we expected.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure REPLing - Orders of Growth Analysis With Incanter]]></title>
    <link href="http://rxacevedo.github.io/blog/2014/01/03/clojure-repling-orders-of-growth-analysis-with-incanter/"/>
    <updated>2014-01-03T18:06:59-05:00</updated>
    <id>http://rxacevedo.github.io/blog/2014/01/03/clojure-repling-orders-of-growth-analysis-with-incanter</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been messing around with Incanter for the past two days now and have had a
great experience thus far, prompting me to write a little bit about it. Incanter
is (as it states on <a href="http://incanter.org">the homepage</a>)  a computing and graphics
library built on the Clojure platform that strives to be semantically similar to R.
The true power in using Incanter, though (for me, anyways), is that it can be used
directly from the Clojure REPL working directly with Clojure data structures. Because
Clojure is so malleable, we can tranform our data easily and feed it directly into
Incanter, allowing us to observe statistics about the data as well as to plot it on
beautiful charts. The snippet below produces a line-chart based on data generated
using Clojure&rsquo;s time function:</p>

<p>``` clojure Line Chart
(let [coll-sizes (map #(expt 2 %) (range 5 10)) ;; Set up the collection sizes to be used</p>

<pre><code>  methods ['rvrs 'my-rvrs 'reverse]] ;; Hold method names in a collection as symbols                  
</code></pre>

<p>  (&ndash;> (for [x methods</p>

<pre><code>        y coll-sizes
        :let [z (binding [*out* (java.io.StringWriter.)] ;; Pipe stdout to a StringWriter (x * y instantiations)
                  (time ((resolve x) (range 0 y))) ;; Resolve x (symbol) to actual function and apply it to coll (size y), timing the running time and printing it to the StringWriter
                  (-&gt;&gt; (.. *out* toString) ;; Retrieve output from StringWriter
                       (re-find #"\d+.\d+") ;; Parse out the numeric value (running time)
                       Double/parseDouble))]] 
    [x y z]) ;; Convert to double for plotting
  to-dataset ;; Convert the yielded list an Incanter dataset
  (with-data 
    (save-pdf (line-chart :col-1 :col-2 
                          :group-by :col-0 
                          :x-label "coll-size" 
                          :y-label "runtime (ms)" 
                          :legend true) "/Users/Roberto/Desktop/reversals.pdf")))) ;; Plot the data and save it to a PDF
</code></pre>

<p>;; The for-comprehension yields a collection of this structure:</p>

<p>;; ([rvrs 32 0.086]
;;  [rvrs 64 0.145]
;;  [rvrs 128 0.485]
;;  [rvrs 256 1.717]
;;  [rvrs 512 7.809]
;;  [my-rvrs 32 0.018]
;;  [my-rvrs 64 0.016]
;;  [my-rvrs 128 0.024]
;;  [my-rvrs 256 0.042]
;;  [my-rvrs 512 0.082]
;;  [reverse 32 0.009]
;;  [reverse 64 0.007]
;;  [reverse 128 0.014]
;;  [reverse 256 0.028]
;;  [reverse 512 0.051])</p>

<p>;; And calling to-dataset on it yields this output in the REPL:</p>

<p>;; |  :col-0 | :col-1 | :col-2 |
;; |&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;|
;; |    rvrs |     32 |  0.073 |
;; |    rvrs |     64 |  0.132 |
;; |    rvrs |    128 |  0.473 |
;; |    rvrs |    256 |  1.704 |
;; |    rvrs |    512 |  6.696 |
;; | my-rvrs |     32 |   0.01 |
;; | my-rvrs |     64 |  0.012 |
;; | my-rvrs |    128 |  0.022 |
;; | my-rvrs |    256 |  0.043 |
;; | my-rvrs |    512 |  0.078 |
;; | reverse |     32 |  0.007 |
;; | reverse |     64 |  0.011 |
;; | reverse |    128 |  0.014 |
;; | reverse |    256 |  0.026 |
;; | reverse |    512 |  0.054 |</p>

<p>```</p>

<p>It generates <a href="/downloads/code/incanter/reversals.pdf">this PDF</a>.</p>
]]></content>
  </entry>
  
</feed>
